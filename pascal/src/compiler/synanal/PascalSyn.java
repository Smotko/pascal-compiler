
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 02 11:48:34 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 02 11:48:34 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\011\000\002\003" +
    "\005\000\002\004\002\000\002\004\004\000\002\011\004" +
    "\000\002\011\003\000\002\012\006\000\002\005\002\000" +
    "\002\005\004\000\002\013\004\000\002\013\003\000\002" +
    "\014\006\000\002\006\002\000\002\006\004\000\002\015" +
    "\004\000\002\015\003\000\002\016\006\000\002\007\005" +
    "\000\002\007\005\000\002\007\002\000\002\024\010\000" +
    "\002\023\006\000\002\025\010\000\002\017\005\000\002" +
    "\020\002\000\002\020\003\000\002\021\005\000\002\021" +
    "\003\000\002\022\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\026\006\000\002\026\005\000\002\026" +
    "\006\000\002\026\005\000\002\026\005\000\002\027\002" +
    "\000\002\027\004\000\002\030\002\000\002\030\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\005\000\002\032\012\000\002\033\005" +
    "\000\002\034\004\000\002\034\003\000\002\035\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\036\005\000\002\037\006\000\002\037\010" +
    "\000\002\040\005\000\002\041\002\000\002\041\004\000" +
    "\002\042\002\000\002\042\005\000\002\043\006\000\002" +
    "\044\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\063\006\001\002\000\016\051\ufffe\052" +
    "\012\057\ufffe\062\ufffe\067\ufffe\070\ufffe\001\002\000\004" +
    "\002\011\001\002\000\004\010\007\001\002\000\004\024" +
    "\010\001\002\000\016\051\uffff\052\uffff\057\uffff\062\uffff" +
    "\067\uffff\070\uffff\001\002\000\004\002\001\001\002\000" +
    "\004\010\262\001\002\000\014\051\ufff9\057\ufff9\062\ufff9" +
    "\067\015\070\ufff9\001\002\000\012\051\ufff4\057\ufff4\062" +
    "\ufff4\070\153\001\002\000\004\010\020\001\002\000\014" +
    "\010\ufff6\051\ufff6\057\ufff6\062\ufff6\070\ufff6\001\002\000" +
    "\014\010\020\051\ufff8\057\ufff8\062\ufff8\070\ufff8\001\002" +
    "\000\004\030\021\001\002\000\022\010\034\011\025\012" +
    "\035\013\022\021\023\042\032\047\027\064\030\001\002" +
    "\000\014\010\uffc4\022\uffc4\023\uffc4\024\uffc4\055\uffc4\001" +
    "\002\000\022\010\034\011\025\012\035\013\022\021\023" +
    "\042\032\047\027\064\030\001\002\000\014\010\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\055\uffc0\001\002\000\014\010\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\055\uffc2\001\002\000\014\010" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\055\uffbe\001\002\000\004" +
    "\020\052\001\002\000\004\010\041\001\002\000\014\010" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\055\uffbf\001\002\000\022" +
    "\010\034\011\025\012\035\013\022\021\023\042\032\047" +
    "\027\064\030\001\002\000\004\024\036\001\002\000\014" +
    "\010\uffc1\022\uffc1\023\uffc1\024\uffc1\055\uffc1\001\002\000" +
    "\014\010\uffc3\022\uffc3\023\uffc3\024\uffc3\055\uffc3\001\002" +
    "\000\014\010\ufff5\051\ufff5\057\ufff5\062\ufff5\070\ufff5\001" +
    "\002\000\014\010\uffb8\022\uffb8\023\uffb8\024\uffb8\055\uffb8" +
    "\001\002\000\010\010\uffb9\024\046\055\uffb9\001\002\000" +
    "\004\014\050\001\002\000\006\010\041\055\045\001\002" +
    "\000\012\010\uffe5\023\uffe5\024\uffe5\055\uffe5\001\002\000" +
    "\010\010\uffba\024\046\055\uffba\001\002\000\014\010\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\055\uffbb\001\002\000\004\010" +
    "\041\001\002\000\012\010\uffe6\023\uffe6\024\uffe6\055\uffe6" +
    "\001\002\000\022\010\034\011\025\012\035\013\022\021" +
    "\023\042\032\047\027\064\030\001\002\000\012\010\uffe4" +
    "\023\uffe4\024\uffe4\055\uffe4\001\002\000\030\004\056\005" +
    "\062\006\054\007\055\010\063\020\066\021\053\025\057" +
    "\040\064\042\060\043\061\001\002\000\030\004\056\005" +
    "\062\006\054\007\055\010\063\020\066\021\053\025\057" +
    "\040\064\042\060\043\061\001\002\000\066\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3\050\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\065\uffe3\066\uffe3\001\002\000" +
    "\066\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\050\uffe0\053\uffe0\054\uffe0\055\uffe0\065\uffe0\066" +
    "\uffe0\001\002\000\066\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\050\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\065\uffe1\066\uffe1\001\002\000\030\004\056\005\062" +
    "\006\054\007\055\010\063\020\066\021\053\025\057\040" +
    "\064\042\060\043\061\001\002\000\030\004\056\005\062" +
    "\006\054\007\055\010\063\020\066\021\053\025\057\040" +
    "\064\042\060\043\061\001\002\000\030\004\056\005\062" +
    "\006\054\007\055\010\063\020\066\021\053\025\057\040" +
    "\064\042\060\043\061\001\002\000\066\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\036\uffe2\037\uffe2\041\uffe2\042\uffe2\043\uffe2\050\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\065\uffe2\066\uffe2\001\002\000\070" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\135\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\041\uffce\042" +
    "\uffce\043\uffce\050\uffce\053\uffce\054\uffce\055\uffce\065\uffce" +
    "\066\uffce\001\002\000\030\004\056\005\062\006\054\007" +
    "\055\010\063\020\066\021\053\025\057\040\064\042\060" +
    "\043\061\001\002\000\042\016\102\017\077\020\105\025" +
    "\076\026\071\027\103\030\073\031\106\032\072\033\110" +
    "\034\074\036\104\037\075\041\107\042\100\043\101\001" +
    "\002\000\022\010\034\011\025\012\035\013\022\021\023" +
    "\042\032\047\027\064\030\001\002\000\004\022\070\001" +
    "\002\000\066\015\uffca\016\uffca\017\uffca\020\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\041\uffca" +
    "\042\uffca\043\uffca\050\uffca\053\uffca\054\uffca\055\uffca\065" +
    "\uffca\066\uffca\001\002\000\030\004\056\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\057\040\064\042" +
    "\060\043\061\001\002\000\030\004\056\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\057\040\064\042" +
    "\060\043\061\001\002\000\030\004\056\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\057\040\064\042" +
    "\060\043\061\001\002\000\030\004\056\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\057\040\064\042" +
    "\060\043\061\001\002\000\030\004\056\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\057\040\064\042" +
    "\060\043\061\001\002\000\030\004\056\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\057\040\064\042" +
    "\060\043\061\001\002\000\030\004\056\005\062\006\054" +
    "\007\055\010\063\020\066\021\053\025\057\040\064\042" +
    "\060\043\061\001\002\000\066\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb" +
    "\037\uffdb\041\uffdb\042\uffdb\043\uffdb\050\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\065\uffdb\066\uffdb\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\052\015\uffd2" +
    "\016\102\017\uffd2\020\105\022\uffd2\023\uffd2\024\uffd2\025" +
    "\076\026\uffd2\027\103\036\104\041\uffd2\042\uffd2\043\101" +
    "\050\uffd2\053\uffd2\054\uffd2\055\uffd2\065\uffd2\066\uffd2\001" +
    "\002\000\066\015\uffcf\016\102\017\uffcf\020\105\022\uffcf" +
    "\023\uffcf\024\uffcf\025\076\026\071\027\103\030\073\031" +
    "\106\032\072\033\110\034\074\036\104\037\075\041\uffcf" +
    "\042\uffcf\043\101\050\uffcf\053\uffcf\054\uffcf\055\uffcf\065" +
    "\uffcf\066\uffcf\001\002\000\052\015\uffd1\016\102\017\uffd1" +
    "\020\105\022\uffd1\023\uffd1\024\uffd1\025\076\026\uffd1\027" +
    "\103\036\104\041\uffd1\042\uffd1\043\101\050\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\065\uffd1\066\uffd1\001\002\000\042\016" +
    "\102\020\105\022\115\025\076\026\071\027\103\030\073" +
    "\031\106\032\072\033\110\034\074\036\104\037\075\041" +
    "\107\042\100\043\101\001\002\000\066\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\036\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\050\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\065\uffcd\066\uffcd\001\002\000\066" +
    "\015\uffda\016\102\017\uffda\020\105\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\036\uffda\037\uffda\041\uffda\042\uffda\043" +
    "\uffda\050\uffda\053\uffda\054\uffda\055\uffda\065\uffda\066\uffda" +
    "\001\002\000\066\015\uffd9\016\102\017\uffd9\020\105\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\050\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\065\uffd9\066\uffd9\001\002\000\066\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036" +
    "\uffcc\037\uffcc\041\uffcc\042\uffcc\043\uffcc\050\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\065\uffcc\066\uffcc\001\002\000\066\015" +
    "\uffd7\016\102\017\uffd7\020\105\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\103\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\036\104\037\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\050\uffd7\053\uffd7\054\uffd7\055\uffd7\065\uffd7\066\uffd7\001" +
    "\002\000\042\016\102\020\105\022\123\025\076\026\071" +
    "\027\103\030\073\031\106\032\072\033\110\034\074\036" +
    "\104\037\075\041\107\042\100\043\101\001\002\000\004" +
    "\061\124\001\002\000\022\010\034\011\025\012\035\013" +
    "\022\021\023\042\032\047\027\064\030\001\002\000\014" +
    "\010\uffbc\022\uffbc\023\uffbc\024\uffbc\055\uffbc\001\002\000" +
    "\066\015\uffd8\016\102\017\uffd8\020\105\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\103\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\036\104\037\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\050\uffd8\053\uffd8\054\uffd8\055\uffd8\065\uffd8\066" +
    "\uffd8\001\002\000\052\015\uffd5\016\102\017\uffd5\020\105" +
    "\022\uffd5\023\uffd5\024\uffd5\025\076\026\uffd5\027\103\036" +
    "\104\041\uffd5\042\uffd5\043\101\050\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\065\uffd5\066\uffd5\001\002\000\052\015\uffd4\016" +
    "\102\017\uffd4\020\105\022\uffd4\023\uffd4\024\uffd4\025\076" +
    "\026\uffd4\027\103\036\104\041\uffd4\042\uffd4\043\101\050" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\065\uffd4\066\uffd4\001\002" +
    "\000\052\015\uffd6\016\102\017\uffd6\020\105\022\uffd6\023" +
    "\uffd6\024\uffd6\025\076\026\uffd6\027\103\036\104\041\uffd6" +
    "\042\uffd6\043\101\050\uffd6\053\uffd6\054\uffd6\055\uffd6\065" +
    "\uffd6\066\uffd6\001\002\000\052\015\uffd3\016\102\017\uffd3" +
    "\020\105\022\uffd3\023\uffd3\024\uffd3\025\076\026\uffd3\027" +
    "\103\036\104\041\uffd3\042\uffd3\043\101\050\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\065\uffd3\066\uffd3\001\002\000\066\015" +
    "\uffd0\016\102\017\uffd0\020\105\022\uffd0\023\uffd0\024\uffd0" +
    "\025\076\026\uffd0\027\103\030\073\031\106\032\072\033" +
    "\110\034\074\036\104\037\075\041\uffd0\042\uffd0\043\101" +
    "\050\uffd0\053\uffd0\054\uffd0\055\uffd0\065\uffd0\066\uffd0\001" +
    "\002\000\066\015\uffdc\016\102\017\uffdc\020\105\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\050\uffdc\053\uffdc\054\uffdc\055\uffdc\065" +
    "\uffdc\066\uffdc\001\002\000\032\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\020\uffc6\021\uffc6\023\uffc8\025\uffc6\040" +
    "\uffc6\042\uffc6\043\uffc6\001\002\000\030\004\056\005\062" +
    "\006\054\007\055\010\063\020\066\021\053\025\057\040" +
    "\064\042\060\043\061\001\002\000\004\023\140\001\002" +
    "\000\066\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\050\uffcb\053\uffcb\054\uffcb\055\uffcb\065\uffcb" +
    "\066\uffcb\001\002\000\044\015\142\016\102\020\105\023" +
    "\uffc7\025\076\026\071\027\103\030\073\031\106\032\072" +
    "\033\110\034\074\036\104\037\075\041\107\042\100\043" +
    "\101\001\002\000\030\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\020\uffc5\021\uffc5\025\uffc5\040\uffc5\042\uffc5\043" +
    "\uffc5\001\002\000\066\015\uffdd\016\102\017\uffdd\020\105" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\050\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\065\uffdd\066\uffdd\001\002\000\066\015\uffdf\016\102" +
    "\017\uffdf\020\105\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\036\uffdf\037\uffdf\041\uffdf\042\uffdf\043\uffdf\050\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\065\uffdf\066\uffdf\001\002\000\066" +
    "\015\uffde\016\102\017\uffde\020\105\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\036\uffde\037\uffde\041\uffde\042\uffde\043" +
    "\uffde\050\uffde\053\uffde\054\uffde\055\uffde\065\uffde\066\uffde" +
    "\001\002\000\042\016\102\020\105\023\147\025\076\026" +
    "\071\027\103\030\073\031\106\032\072\033\110\034\074" +
    "\036\104\037\075\041\107\042\100\043\101\001\002\000" +
    "\066\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\050\uffc9\053\uffc9\054\uffc9\055\uffc9\065\uffc9\066" +
    "\uffc9\001\002\000\004\023\151\001\002\000\014\010\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\055\uffbd\001\002\000\014\010" +
    "\ufff7\051\ufff7\057\ufff7\062\ufff7\070\ufff7\001\002\000\004" +
    "\010\252\001\002\000\010\051\uffed\057\uffed\062\uffed\001" +
    "\002\000\010\051\161\057\163\062\157\001\002\000\016" +
    "\051\ufffe\052\012\057\ufffe\062\ufffe\067\ufffe\070\ufffe\001" +
    "\002\000\004\010\245\001\002\000\004\016\244\001\002" +
    "\000\044\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\020" +
    "\uffaa\021\uffaa\024\uffaa\025\uffaa\040\uffaa\042\uffaa\043\uffaa" +
    "\051\uffaa\055\uffac\056\uffaa\060\uffaa\071\uffaa\001\002\000" +
    "\016\051\ufffe\052\012\057\ufffe\062\ufffe\067\ufffe\070\ufffe" +
    "\001\002\000\004\010\164\001\002\000\004\021\166\001" +
    "\002\000\004\014\172\001\002\000\006\010\041\023\uffe8" +
    "\001\002\000\006\023\uffe7\024\046\001\002\000\004\023" +
    "\171\001\002\000\006\014\uffe9\024\uffe9\001\002\000\022" +
    "\010\034\011\025\012\035\013\022\021\023\042\032\047" +
    "\027\064\030\001\002\000\004\024\174\001\002\000\016" +
    "\051\uffea\052\uffea\057\uffea\062\uffea\067\uffea\070\uffea\001" +
    "\002\000\014\051\ufff9\057\ufff9\062\ufff9\067\015\070\ufff9" +
    "\001\002\000\010\051\uffee\057\uffee\062\uffee\001\002\000" +
    "\012\051\ufff4\057\ufff4\062\ufff4\070\153\001\002\000\010" +
    "\051\uffed\057\uffed\062\uffed\001\002\000\010\051\161\057" +
    "\163\062\157\001\002\000\004\024\203\001\002\000\010" +
    "\051\uffec\057\uffec\062\uffec\001\002\000\004\055\243\001" +
    "\002\000\042\004\056\005\062\006\054\007\055\010\063" +
    "\020\066\021\053\024\214\025\057\040\064\042\060\043" +
    "\061\051\161\056\220\060\212\071\210\001\002\000\006" +
    "\024\242\055\uffab\001\002\000\010\024\uffb5\054\uffb5\055" +
    "\uffb5\001\002\000\030\004\056\005\062\006\054\007\055" +
    "\010\063\020\066\021\053\025\057\040\064\042\060\043" +
    "\061\001\002\000\010\024\uffb3\054\uffb3\055\uffb3\001\002" +
    "\000\030\004\056\005\062\006\054\007\055\010\063\020" +
    "\066\021\053\025\057\040\064\042\060\043\061\001\002" +
    "\000\010\024\uffb2\054\uffb2\055\uffb2\001\002\000\010\024" +
    "\uffb1\054\uffb1\055\uffb1\001\002\000\010\024\uffb6\054\uffb6" +
    "\055\uffb6\001\002\000\010\024\uffb4\054\uffb4\055\uffb4\001" +
    "\002\000\050\016\102\020\105\024\uffb7\025\076\026\071" +
    "\027\103\030\073\031\106\032\072\033\110\034\074\036" +
    "\104\037\075\041\107\042\100\043\101\050\230\054\uffb7" +
    "\055\uffb7\001\002\000\004\010\221\001\002\000\004\050" +
    "\222\001\002\000\030\004\056\005\062\006\054\007\055" +
    "\010\063\020\066\021\053\025\057\040\064\042\060\043" +
    "\061\001\002\000\042\016\102\020\105\025\076\026\071" +
    "\027\103\030\073\031\106\032\072\033\110\034\074\036" +
    "\104\037\075\041\107\042\100\043\101\066\224\001\002" +
    "\000\030\004\056\005\062\006\054\007\055\010\063\020" +
    "\066\021\053\025\057\040\064\042\060\043\061\001\002" +
    "\000\042\016\102\020\105\025\076\026\071\027\103\030" +
    "\073\031\106\032\072\033\110\034\074\036\104\037\075" +
    "\041\107\042\100\043\101\053\226\001\002\000\042\004" +
    "\056\005\062\006\054\007\055\010\063\020\066\021\053" +
    "\024\214\025\057\040\064\042\060\043\061\051\161\056" +
    "\220\060\212\071\210\001\002\000\010\024\uffa7\054\uffa7" +
    "\055\uffa7\001\002\000\030\004\056\005\062\006\054\007" +
    "\055\010\063\020\066\021\053\025\057\040\064\042\060" +
    "\043\061\001\002\000\046\016\102\020\105\024\uffb0\025" +
    "\076\026\071\027\103\030\073\031\106\032\072\033\110" +
    "\034\074\036\104\037\075\041\107\042\100\043\101\054" +
    "\uffb0\055\uffb0\001\002\000\042\016\102\020\105\025\076" +
    "\026\071\027\103\030\073\031\106\032\072\033\110\034" +
    "\074\036\104\037\075\041\107\042\100\043\101\065\233" +
    "\001\002\000\042\004\056\005\062\006\054\007\055\010" +
    "\063\020\066\021\053\024\214\025\057\040\064\042\060" +
    "\043\061\051\161\056\220\060\212\071\210\001\002\000" +
    "\010\024\uffaf\054\235\055\uffaf\001\002\000\042\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\024" +
    "\214\025\057\040\064\042\060\043\061\051\161\056\220" +
    "\060\212\071\210\001\002\000\010\024\uffae\054\uffae\055" +
    "\uffae\001\002\000\042\016\102\020\105\025\076\026\071" +
    "\027\103\030\073\031\106\032\072\033\110\034\074\036" +
    "\104\037\075\041\107\042\100\043\101\053\240\001\002" +
    "\000\042\004\056\005\062\006\054\007\055\010\063\020" +
    "\066\021\053\024\214\025\057\040\064\042\060\043\061" +
    "\051\161\056\220\060\212\071\210\001\002\000\010\024" +
    "\uffa8\054\uffa8\055\uffa8\001\002\000\042\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\020\uffa9\021\uffa9\024\uffa9\025" +
    "\uffa9\040\uffa9\042\uffa9\043\uffa9\051\uffa9\056\uffa9\060\uffa9" +
    "\071\uffa9\001\002\000\012\016\uffad\024\uffad\054\uffad\055" +
    "\uffad\001\002\000\004\002\000\001\002\000\004\021\166" +
    "\001\002\000\004\024\247\001\002\000\016\051\uffeb\052" +
    "\uffeb\057\uffeb\062\uffeb\067\uffeb\070\uffeb\001\002\000\010" +
    "\051\uffef\057\uffef\062\uffef\001\002\000\012\010\ufff1\051" +
    "\ufff1\057\ufff1\062\ufff1\001\002\000\004\014\255\001\002" +
    "\000\012\010\252\051\ufff3\057\ufff3\062\ufff3\001\002\000" +
    "\012\010\ufff2\051\ufff2\057\ufff2\062\ufff2\001\002\000\022" +
    "\010\034\011\025\012\035\013\022\021\023\042\032\047" +
    "\027\064\030\001\002\000\004\024\257\001\002\000\012" +
    "\010\ufff0\051\ufff0\057\ufff0\062\ufff0\001\002\000\016\010" +
    "\262\051\ufffd\057\ufffd\062\ufffd\067\ufffd\070\ufffd\001\002" +
    "\000\016\010\ufffb\051\ufffb\057\ufffb\062\ufffb\067\ufffb\070" +
    "\ufffb\001\002\000\004\030\263\001\002\000\030\004\056" +
    "\005\062\006\054\007\055\010\063\020\066\021\053\025" +
    "\057\040\064\042\060\043\061\001\002\000\042\016\102" +
    "\020\105\024\265\025\076\026\071\027\103\030\073\031" +
    "\106\032\072\033\110\034\074\036\104\037\075\041\107" +
    "\042\100\043\101\001\002\000\016\010\ufffa\051\ufffa\057" +
    "\ufffa\062\ufffa\067\ufffa\070\ufffa\001\002\000\016\010\ufffc" +
    "\051\ufffc\057\ufffc\062\ufffc\067\ufffc\070\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\004\003\003\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\257\012\260\001\001\000\004\005\013\001\001\000\004" +
    "\006\153\001\001\000\006\013\016\014\015\001\001\000" +
    "\002\001\001\000\004\014\151\001\001\000\002\001\001" +
    "\000\012\031\032\032\023\033\030\035\025\001\001\000" +
    "\002\001\001\000\012\031\147\032\023\033\030\035\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\037\022\042\034\041" +
    "\001\001\000\002\001\001\000\012\031\036\032\023\033" +
    "\030\035\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\043\022\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\046\001\001\000\002\001\001\000\012" +
    "\031\050\032\023\033\030\035\025\001\001\000\002\001" +
    "\001\000\004\026\064\001\001\000\004\026\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\144\001\001\000\004\026\143\001\001\000\004" +
    "\026\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\133\001\001\000\002\001\001\000\012\031\066" +
    "\032\023\033\030\035\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\132\001\001\000\004\026\131" +
    "\001\001\000\004\026\130\001\001\000\004\026\127\001" +
    "\001\000\004\026\126\001\001\000\004\026\125\001\001" +
    "\000\004\026\121\001\001\000\002\001\001\000\004\026" +
    "\120\001\001\000\004\026\117\001\001\000\004\026\116" +
    "\001\001\000\004\026\115\001\001\000\004\026\113\001" +
    "\001\000\004\026\112\001\001\000\004\026\111\001\001" +
    "\000\004\026\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\031\124\032\023\033\030\035\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\136\030\135\001\001\000\004" +
    "\026\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\252\016\250\001\001\000\004\007\154\001" +
    "\001\000\010\023\155\025\161\040\157\001\001\000\006" +
    "\004\174\024\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\203\042\204\001\001\000\006\004\174" +
    "\024\175\001\001\000\002\001\001\000\004\017\164\001" +
    "\001\000\002\001\001\000\010\020\167\021\166\022\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\031\172\032\023\033\030\035\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\176\001" +
    "\001\000\002\001\001\000\004\006\177\001\001\000\004" +
    "\007\200\001\001\000\010\023\155\025\161\040\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\205\026\216\036\214\037\206\040\215\043" +
    "\210\044\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\236\001\001\000\002\001\001\000\004\026" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\222\001\001\000\002" +
    "\001\001\000\004\026\224\001\001\000\002\001\001\000" +
    "\020\010\226\026\216\036\214\037\206\040\215\043\210" +
    "\044\212\001\001\000\002\001\001\000\004\026\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\233" +
    "\026\216\036\214\037\206\040\215\043\210\044\212\001" +
    "\001\000\002\001\001\000\020\010\235\026\216\036\214" +
    "\037\206\040\215\043\210\044\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\240\026\216\036\214" +
    "\037\206\040\215\043\210\044\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\253\001\001\000\002\001\001\000\012\031" +
    "\255\032\023\033\030\035\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_statement ::= FOR IDENTIFIER ASSIGN value TO value DO statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("for_statement",34, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // while_statement ::= WHILE value DO statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("while_statement",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // list_statement2 ::= list_statement2 statement SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement2",32, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // list_statement2 ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement2",32, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // list_statement ::= list_statement2 statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // list_statement ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // multiple_statement ::= BEGIN list_statement END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("multiple_statement",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_statement ::= IF value THEN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("if_statement",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_statement ::= IF value THEN statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("if_statement",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assign_statement ::= value ASSIGN value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("assign_statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= multiple_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= assign_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ptr_type ::= PTR type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("ptr_type",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // record_list ::= parms 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_list",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // record_list ::= record_list parms 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_list",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // record_type ::= RECORD record_list END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // table_type ::= ARRAY LBRACKET value DOTS value RBRACKET OF type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("table_type",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= LPARENTHESIS type RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= ptr_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= record_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= table_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= INT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value_params ::= value_params value COMMA 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_params",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value_params ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_params",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value_list ::= value_params value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value_list ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= LPARENTHESIS value RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= LBRACKET type RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= IDENTIFIER LPARENTHESIS value_list RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= value DOT value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= value LBRACKET value RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= value OR value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= value AND value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= value GEQ value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= value LEQ value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= value GTH value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= value LTH value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= value NEQ value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= value EQU value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value ::= value SUB value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= value ADD value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= value DIV value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= value MUL value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= value PTR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= NOT value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= SUB value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= ADD value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= PTR value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= NIL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // value ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // value ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parm ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parm",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parms ::= parm 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parms",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parms ::= parms SEMIC parm 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parms",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters_list ::= parms 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters_list ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= LPARENTHESIS parameters_list RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_head ::= FUNCTION IDENTIFIER parameters COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function_head",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_head ::= PROCEDURE IDENTIFIER parameters SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure_head",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pf_declarations ::= constant_declarations type_declarations variable_declarations subprogram_declarations multiple_statement SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("pf_declarations",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // subprogram_declarations ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // subprogram_declarations ::= subprogram_declarations function_head pf_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // subprogram_declarations ::= subprogram_declarations procedure_head pf_declarations 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var ::= IDENTIFIER COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vars ::= var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vars ::= vars var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_declarations ::= VAR vars 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("variable_declarations",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable_declarations ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("variable_declarations",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration ::= IDENTIFIER EQU type SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declaration",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // types ::= type_declaration 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // types ::= types type_declaration 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declarations ::= TYPE types 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_declarations ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant ::= IDENTIFIER EQU value SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constants ::= constant 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constants ::= constants constant 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constant_declarations ::= CONST constants 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_declarations",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constant_declarations ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_declarations",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_indication ::= PROGRAM IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program_indication",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= program_indication constant_declarations type_declarations variable_declarations subprogram_declarations multiple_statement DOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

