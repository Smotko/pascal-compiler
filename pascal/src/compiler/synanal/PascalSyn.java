
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 19 13:59:57 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;
import compiler.abstree.*;
import compiler.abstree.tree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 19 13:59:57 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\007\002\000\002\007\005\000\002\015\004" +
    "\000\002\015\002\000\002\026\006\000\002\010\002\000" +
    "\002\010\004\000\002\014\004\000\002\014\003\000\002" +
    "\027\006\000\002\011\010\000\002\011\011\000\002\011" +
    "\002\000\002\012\010\000\002\012\002\000\002\017\010" +
    "\000\002\017\007\000\002\017\002\000\002\016\007\000" +
    "\002\016\002\000\002\013\012\000\002\013\002\000\002" +
    "\020\010\000\002\020\012\000\002\006\006\000\002\006" +
    "\002\000\002\005\007\000\002\005\002\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\030\006\000\002\030" +
    "\005\000\002\030\006\000\002\030\005\000\002\030\005" +
    "\000\002\031\002\000\002\031\004\000\002\032\002\000" +
    "\002\032\005\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\005\000\002\035\012" +
    "\000\002\036\010\000\002\004\007\000\002\004\002\000" +
    "\002\034\004\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\025\005\000\002\022\006" +
    "\000\002\022\010\000\002\037\005\000\002\040\002\000" +
    "\002\040\004\000\002\041\002\000\002\041\005\000\002" +
    "\023\006\000\002\024\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\064\005\001\002\000\004\002\272\001" +
    "\002\000\004\010\007\001\002\000\016\052\ufffe\053\011" +
    "\060\ufffe\063\ufffe\070\ufffe\071\ufffe\001\002\000\004\025" +
    "\010\001\002\000\016\052\uffff\053\uffff\060\uffff\063\uffff" +
    "\070\uffff\071\uffff\001\002\000\004\010\ufffb\001\002\000" +
    "\014\052\ufff9\060\ufff9\063\ufff9\070\014\071\ufff9\001\002" +
    "\000\012\052\ufff0\060\ufff0\063\ufff0\071\146\001\002\000" +
    "\004\010\017\001\002\000\014\010\ufff6\052\ufff6\060\ufff6" +
    "\063\ufff6\071\ufff6\001\002\000\014\010\017\052\ufff8\060" +
    "\ufff8\063\ufff8\071\ufff8\001\002\000\004\031\020\001\002" +
    "\000\022\010\033\011\024\012\034\013\022\022\021\043" +
    "\031\050\026\065\027\001\002\000\022\010\033\011\024" +
    "\012\034\013\022\022\021\043\031\050\026\065\027\001" +
    "\002\000\012\023\uffc3\024\uffc3\025\uffc3\056\uffc3\001\002" +
    "\000\012\023\uffbf\024\uffbf\025\uffbf\056\uffbf\001\002\000" +
    "\012\023\uffc1\024\uffc1\025\uffc1\056\uffc1\001\002\000\012" +
    "\023\uffbd\024\uffbd\025\uffbd\056\uffbd\001\002\000\004\021" +
    "\045\001\002\000\004\010\uffb8\001\002\000\012\023\uffbe" +
    "\024\uffbe\025\uffbe\056\uffbe\001\002\000\022\010\033\011" +
    "\024\012\034\013\022\022\021\043\031\050\026\065\027" +
    "\001\002\000\004\025\035\001\002\000\012\023\uffc0\024" +
    "\uffc0\025\uffc0\056\uffc0\001\002\000\012\023\uffc2\024\uffc2" +
    "\025\uffc2\056\uffc2\001\002\000\014\010\ufff5\052\ufff5\060" +
    "\ufff5\063\ufff5\071\ufff5\001\002\000\012\023\uffb7\024\uffb7" +
    "\025\uffb7\056\uffb7\001\002\000\004\010\040\001\002\000" +
    "\004\015\041\001\002\000\022\010\033\011\024\012\034" +
    "\013\022\022\021\043\031\050\026\065\027\001\002\000" +
    "\006\025\043\056\044\001\002\000\004\010\uffb9\001\002" +
    "\000\012\023\uffba\024\uffba\025\uffba\056\uffba\001\002\000" +
    "\030\004\052\005\055\006\047\007\050\010\056\021\061" +
    "\022\046\026\051\041\060\043\054\044\053\001\002\000" +
    "\030\004\052\005\055\006\047\007\050\010\056\021\061" +
    "\022\046\026\051\041\060\043\054\044\053\001\002\000" +
    "\066\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\051\uffe2\054\uffe2\055\uffe2\056\uffe2\066\uffe2\067" +
    "\uffe2\001\002\000\066\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\051\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\066\uffdf\067\uffdf\001\002\000\030\004\052\005\055" +
    "\006\047\007\050\010\056\021\061\022\046\026\051\041" +
    "\060\043\054\044\053\001\002\000\066\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\051\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\066\uffe0\067\uffe0\001\002\000\030" +
    "\004\052\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\051\041\060\043\054\044\053\001\002\000\030" +
    "\004\052\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\051\041\060\043\054\044\053\001\002\000\066" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1\066\uffe1\067\uffe1" +
    "\001\002\000\070\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\130\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\051\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\066\uffcd\067\uffcd\001\002\000\042\017\076\020" +
    "\123\021\101\026\072\027\065\030\075\031\067\032\100" +
    "\033\066\034\103\035\070\037\077\040\071\042\102\043" +
    "\074\044\073\001\002\000\030\004\052\005\055\006\047" +
    "\007\050\010\056\021\061\022\046\026\051\041\060\043" +
    "\054\044\053\001\002\000\022\010\033\011\024\012\034" +
    "\013\022\022\021\043\031\050\026\065\027\001\002\000" +
    "\004\023\063\001\002\000\066\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9" +
    "\040\uffc9\042\uffc9\043\uffc9\044\uffc9\051\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\066\uffc9\067\uffc9\001\002\000\066\016\uffdb" +
    "\017\076\020\uffdb\021\101\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\037\uffdb\040\uffdb\042\uffdb\043\074\044\uffdb\051" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\066\uffdb\067\uffdb\001\002" +
    "\000\030\004\052\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\051\041\060\043\054\044\053\001\002" +
    "\000\030\004\052\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\051\041\060\043\054\044\053\001\002" +
    "\000\030\004\052\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\051\041\060\043\054\044\053\001\002" +
    "\000\030\004\052\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\051\041\060\043\054\044\053\001\002" +
    "\000\030\004\052\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\051\041\060\043\054\044\053\001\002" +
    "\000\030\004\052\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\051\041\060\043\054\044\053\001\002" +
    "\000\030\004\052\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\051\041\060\043\054\044\053\001\002" +
    "\000\066\016\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\042\uffda\043" +
    "\uffda\044\uffda\051\uffda\054\uffda\055\uffda\056\uffda\066\uffda" +
    "\067\uffda\001\002\000\030\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\026\051\041\060\043\054" +
    "\044\053\001\002\000\030\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\026\051\041\060\043\054" +
    "\044\053\001\002\000\030\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\026\051\041\060\043\054" +
    "\044\053\001\002\000\030\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\026\051\041\060\043\054" +
    "\044\053\001\002\000\030\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\026\051\041\060\043\054" +
    "\044\053\001\002\000\030\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\026\051\041\060\043\054" +
    "\044\053\001\002\000\030\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\026\051\041\060\043\054" +
    "\044\053\001\002\000\052\016\uffd1\017\076\020\uffd1\021" +
    "\101\023\uffd1\024\uffd1\025\uffd1\026\072\027\uffd1\030\075" +
    "\037\077\042\uffd1\043\074\044\073\051\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\066\uffd1\067\uffd1\001\002\000\066\016\uffce" +
    "\017\076\020\uffce\021\101\023\uffce\024\uffce\025\uffce\026" +
    "\072\027\065\030\075\031\067\032\100\033\066\034\103" +
    "\035\070\037\077\040\071\042\uffce\043\074\044\073\051" +
    "\uffce\054\uffce\055\uffce\056\uffce\066\uffce\067\uffce\001\002" +
    "\000\042\017\076\021\101\023\107\026\072\027\065\030" +
    "\075\031\067\032\100\033\066\034\103\035\070\037\077" +
    "\040\071\042\102\043\074\044\073\001\002\000\066\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\051\uffcc\054\uffcc\055\uffcc\056\uffcc\066\uffcc\067\uffcc\001" +
    "\002\000\052\016\uffd0\017\076\020\uffd0\021\101\023\uffd0" +
    "\024\uffd0\025\uffd0\026\072\027\uffd0\030\075\037\077\042" +
    "\uffd0\043\074\044\073\051\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\066\uffd0\067\uffd0\001\002\000\066\016\uffd9\017\076\020" +
    "\uffd9\021\101\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\042\uffd9\043\074\044\uffd9\051\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\066\uffd9\067\uffd9\001\002\000\066\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\051\uffcb\054\uffcb\055\uffcb\056\uffcb\066\uffcb\067\uffcb\001" +
    "\002\000\066\016\uffd8\017\076\020\uffd8\021\101\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\042\uffd8" +
    "\043\074\044\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8\066" +
    "\uffd8\067\uffd8\001\002\000\066\016\uffd6\017\076\020\uffd6" +
    "\021\101\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\075\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\077" +
    "\040\uffd6\042\uffd6\043\074\044\uffd6\051\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\066\uffd6\067\uffd6\001\002\000\066\016\uffd7" +
    "\017\076\020\uffd7\021\101\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\075\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\037\077\040\uffd7\042\uffd7\043\074\044\uffd7\051" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\066\uffd7\067\uffd7\001\002" +
    "\000\052\016\uffd4\017\076\020\uffd4\021\101\023\uffd4\024" +
    "\uffd4\025\uffd4\026\072\027\uffd4\030\075\037\077\042\uffd4" +
    "\043\074\044\073\051\uffd4\054\uffd4\055\uffd4\056\uffd4\066" +
    "\uffd4\067\uffd4\001\002\000\052\016\uffd3\017\076\020\uffd3" +
    "\021\101\023\uffd3\024\uffd3\025\uffd3\026\072\027\uffd3\030" +
    "\075\037\077\042\uffd3\043\074\044\073\051\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\066\uffd3\067\uffd3\001\002\000\052\016" +
    "\uffd5\017\076\020\uffd5\021\101\023\uffd5\024\uffd5\025\uffd5" +
    "\026\072\027\uffd5\030\075\037\077\042\uffd5\043\074\044" +
    "\073\051\uffd5\054\uffd5\055\uffd5\056\uffd5\066\uffd5\067\uffd5" +
    "\001\002\000\052\016\uffd2\017\076\020\uffd2\021\101\023" +
    "\uffd2\024\uffd2\025\uffd2\026\072\027\uffd2\030\075\037\077" +
    "\042\uffd2\043\074\044\073\051\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\066\uffd2\067\uffd2\001\002\000\066\016\uffcf\017\076" +
    "\020\uffcf\021\101\023\uffcf\024\uffcf\025\uffcf\026\072\027" +
    "\uffcf\030\075\031\067\032\100\033\066\034\103\035\070" +
    "\037\077\040\071\042\uffcf\043\074\044\073\051\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\066\uffcf\067\uffcf\001\002\000\030" +
    "\004\052\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\051\041\060\043\054\044\053\001\002\000\042" +
    "\017\076\021\101\023\125\026\072\027\065\030\075\031" +
    "\067\032\100\033\066\034\103\035\070\037\077\040\071" +
    "\042\102\043\074\044\073\001\002\000\004\062\126\001" +
    "\002\000\022\010\033\011\024\012\034\013\022\022\021" +
    "\043\031\050\026\065\027\001\002\000\012\023\uffbb\024" +
    "\uffbb\025\uffbb\056\uffbb\001\002\000\032\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\021\uffc5\022\uffc5\024\uffc7\026" +
    "\uffc5\041\uffc5\043\uffc5\044\uffc5\001\002\000\030\004\052" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\051\041\060\043\054\044\053\001\002\000\004\024\133" +
    "\001\002\000\066\016\uffca\017\uffca\020\uffca\021\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca\042" +
    "\uffca\043\uffca\044\uffca\051\uffca\054\uffca\055\uffca\056\uffca" +
    "\066\uffca\067\uffca\001\002\000\044\016\135\017\076\021" +
    "\101\024\uffc6\026\072\027\065\030\075\031\067\032\100" +
    "\033\066\034\103\035\070\037\077\040\071\042\102\043" +
    "\074\044\073\001\002\000\030\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\021\uffc4\022\uffc4\026\uffc4\041\uffc4\043" +
    "\uffc4\044\uffc4\001\002\000\066\016\uffde\017\076\020\uffde" +
    "\021\101\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde" +
    "\040\uffde\042\uffde\043\uffde\044\uffde\051\uffde\054\uffde\055" +
    "\uffde\056\uffde\066\uffde\067\uffde\001\002\000\066\016\uffdc" +
    "\017\076\020\uffdc\021\101\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044\uffdc\051" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\066\uffdc\067\uffdc\001\002" +
    "\000\066\016\uffdd\017\076\020\uffdd\021\101\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\051\uffdd\054\uffdd\055\uffdd\056\uffdd\066\uffdd" +
    "\067\uffdd\001\002\000\042\017\076\021\101\024\142\026" +
    "\072\027\065\030\075\031\067\032\100\033\066\034\103" +
    "\035\070\037\077\040\071\042\102\043\074\044\073\001" +
    "\002\000\066\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\051\uffc8\054\uffc8\055\uffc8\056\uffc8\066" +
    "\uffc8\067\uffc8\001\002\000\004\024\144\001\002\000\012" +
    "\023\uffbc\024\uffbc\025\uffbc\056\uffbc\001\002\000\014\010" +
    "\ufff7\052\ufff7\060\ufff7\063\ufff7\071\ufff7\001\002\000\004" +
    "\010\uffeb\001\002\000\010\052\uffe9\060\uffe9\063\uffe9\001" +
    "\002\000\010\052\154\060\155\063\152\001\002\000\016" +
    "\052\ufffe\053\011\060\ufffe\063\ufffe\070\ufffe\071\ufffe\001" +
    "\002\000\004\010\233\001\002\000\004\017\232\001\002" +
    "\000\044\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\021" +
    "\uffa9\022\uffa9\025\uffa9\026\uffa9\041\uffa9\043\uffa9\044\uffa9" +
    "\052\uffa9\056\uffab\057\uffa9\061\uffa9\072\uffa9\001\002\000" +
    "\004\010\156\001\002\000\004\022\157\001\002\000\006" +
    "\010\uffe3\024\uffe5\001\002\000\004\024\166\001\002\000" +
    "\004\010\162\001\002\000\004\015\163\001\002\000\022" +
    "\010\033\011\024\012\034\013\022\022\021\043\031\050" +
    "\026\065\027\001\002\000\006\024\uffe6\025\165\001\002" +
    "\000\004\010\uffe4\001\002\000\004\015\167\001\002\000" +
    "\022\010\033\011\024\012\034\013\022\022\021\043\031" +
    "\050\026\065\027\001\002\000\004\025\171\001\002\000" +
    "\016\052\uffe7\053\uffe7\060\uffe7\063\uffe7\070\uffe7\071\uffe7" +
    "\001\002\000\004\056\231\001\002\000\042\004\052\005" +
    "\055\006\047\007\050\010\056\021\061\022\046\025\202" +
    "\026\051\041\060\043\054\044\053\052\154\057\206\061" +
    "\200\072\176\001\002\000\006\025\230\056\uffaa\001\002" +
    "\000\010\025\uffb4\055\uffb4\056\uffb4\001\002\000\030\004" +
    "\052\005\055\006\047\007\050\010\056\021\061\022\046" +
    "\026\051\041\060\043\054\044\053\001\002\000\010\025" +
    "\uffb2\055\uffb2\056\uffb2\001\002\000\030\004\052\005\055" +
    "\006\047\007\050\010\056\021\061\022\046\026\051\041" +
    "\060\043\054\044\053\001\002\000\010\025\uffb1\055\uffb1" +
    "\056\uffb1\001\002\000\010\025\uffb0\055\uffb0\056\uffb0\001" +
    "\002\000\010\025\uffb5\055\uffb5\056\uffb5\001\002\000\010" +
    "\025\uffb3\055\uffb3\056\uffb3\001\002\000\050\017\076\021" +
    "\101\025\uffb6\026\072\027\065\030\075\031\067\032\100" +
    "\033\066\034\103\035\070\037\077\040\071\042\102\043" +
    "\074\044\073\051\216\055\uffb6\056\uffb6\001\002\000\004" +
    "\010\207\001\002\000\004\051\210\001\002\000\030\004" +
    "\052\005\055\006\047\007\050\010\056\021\061\022\046" +
    "\026\051\041\060\043\054\044\053\001\002\000\042\017" +
    "\076\021\101\026\072\027\065\030\075\031\067\032\100" +
    "\033\066\034\103\035\070\037\077\040\071\042\102\043" +
    "\074\044\073\067\212\001\002\000\030\004\052\005\055" +
    "\006\047\007\050\010\056\021\061\022\046\026\051\041" +
    "\060\043\054\044\053\001\002\000\042\017\076\021\101" +
    "\026\072\027\065\030\075\031\067\032\100\033\066\034" +
    "\103\035\070\037\077\040\071\042\102\043\074\044\073" +
    "\054\214\001\002\000\042\004\052\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\025\202\026\051\041\060" +
    "\043\054\044\053\052\154\057\206\061\200\072\176\001" +
    "\002\000\010\025\uffa6\055\uffa6\056\uffa6\001\002\000\030" +
    "\004\052\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\051\041\060\043\054\044\053\001\002\000\046" +
    "\017\076\021\101\025\uffaf\026\072\027\065\030\075\031" +
    "\067\032\100\033\066\034\103\035\070\037\077\040\071" +
    "\042\102\043\074\044\073\055\uffaf\056\uffaf\001\002\000" +
    "\042\017\076\021\101\026\072\027\065\030\075\031\067" +
    "\032\100\033\066\034\103\035\070\037\077\040\071\042" +
    "\102\043\074\044\073\066\221\001\002\000\042\004\052" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\025" +
    "\202\026\051\041\060\043\054\044\053\052\154\057\206" +
    "\061\200\072\176\001\002\000\010\025\uffae\055\223\056" +
    "\uffae\001\002\000\042\004\052\005\055\006\047\007\050" +
    "\010\056\021\061\022\046\025\202\026\051\041\060\043" +
    "\054\044\053\052\154\057\206\061\200\072\176\001\002" +
    "\000\010\025\uffad\055\uffad\056\uffad\001\002\000\042\017" +
    "\076\021\101\026\072\027\065\030\075\031\067\032\100" +
    "\033\066\034\103\035\070\037\077\040\071\042\102\043" +
    "\074\044\073\054\226\001\002\000\042\004\052\005\055" +
    "\006\047\007\050\010\056\021\061\022\046\025\202\026" +
    "\051\041\060\043\054\044\053\052\154\057\206\061\200" +
    "\072\176\001\002\000\010\025\uffa7\055\uffa7\056\uffa7\001" +
    "\002\000\042\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\021\uffa8\022\uffa8\025\uffa8\026\uffa8\041\uffa8\043\uffa8\044" +
    "\uffa8\052\uffa8\057\uffa8\061\uffa8\072\uffa8\001\002\000\012" +
    "\017\uffac\025\uffac\055\uffac\056\uffac\001\002\000\004\002" +
    "\000\001\002\000\004\022\234\001\002\000\006\010\uffe3" +
    "\024\uffe5\001\002\000\004\024\236\001\002\000\004\025" +
    "\237\001\002\000\016\052\uffe8\053\uffe8\060\uffe8\063\uffe8" +
    "\070\uffe8\071\uffe8\001\002\000\014\052\ufff9\060\ufff9\063" +
    "\ufff9\070\014\071\ufff9\001\002\000\012\052\ufff2\060\ufff2" +
    "\063\ufff2\071\242\001\002\000\004\010\uffed\001\002\000" +
    "\010\052\uffe9\060\uffe9\063\uffe9\001\002\000\010\052\154" +
    "\060\155\063\152\001\002\000\004\025\246\001\002\000" +
    "\010\052\uffea\060\uffea\063\uffea\001\002\000\004\010\250" +
    "\001\002\000\004\015\251\001\002\000\024\010\033\011" +
    "\024\012\034\013\022\014\253\022\021\043\031\050\026" +
    "\065\027\001\002\000\004\025\256\001\002\000\022\010" +
    "\033\011\024\012\034\013\022\022\021\043\031\050\026" +
    "\065\027\001\002\000\004\025\255\001\002\000\012\010" +
    "\uffef\052\ufff3\060\ufff3\063\ufff3\001\002\000\012\010\uffee" +
    "\052\ufff4\060\ufff4\063\ufff4\001\002\000\004\010\260\001" +
    "\002\000\004\015\261\001\002\000\022\010\033\011\024" +
    "\012\034\013\022\022\021\043\031\050\026\065\027\001" +
    "\002\000\004\025\263\001\002\000\012\010\uffec\052\ufff1" +
    "\060\ufff1\063\ufff1\001\002\000\004\010\266\001\002\000" +
    "\016\010\ufffc\052\ufffd\060\ufffd\063\ufffd\070\ufffd\071\ufffd" +
    "\001\002\000\004\031\267\001\002\000\030\004\052\005" +
    "\055\006\047\007\050\010\056\021\061\022\046\026\051" +
    "\041\060\043\054\044\053\001\002\000\042\017\076\021" +
    "\101\025\271\026\072\027\065\030\075\031\067\032\100" +
    "\033\066\034\103\035\070\037\077\040\071\042\102\043" +
    "\074\044\073\001\002\000\016\010\ufffa\052\ufffa\060\ufffa" +
    "\063\ufffa\070\ufffa\071\ufffa\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\263\001\001\000" +
    "\004\010\012\001\001\000\004\012\146\001\001\000\006" +
    "\014\015\027\014\001\001\000\002\001\001\000\004\027" +
    "\144\001\001\000\002\001\001\000\012\033\031\034\024" +
    "\035\022\036\027\001\001\000\012\033\142\034\024\035" +
    "\022\036\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\036\001\001\000\002\001\001\000\012\033\035" +
    "\034\024\035\022\036\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\033" +
    "\041\034\024\035\022\036\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\056\001" +
    "\001\000\004\030\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\137\001\001\000\002\001\001\000" +
    "\004\030\136\001\001\000\004\030\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\063\001\001\000\012\033\061\034\024\035\022\036\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\121\001\001\000\004\030\120\001\001" +
    "\000\004\030\117\001\001\000\004\030\116\001\001\000" +
    "\004\030\115\001\001\000\004\030\114\001\001\000\004" +
    "\030\113\001\001\000\002\001\001\000\004\030\112\001" +
    "\001\000\004\030\111\001\001\000\004\030\110\001\001" +
    "\000\004\030\107\001\001\000\004\030\105\001\001\000" +
    "\004\030\104\001\001\000\004\030\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\126\034\024" +
    "\035\022\036\027\001\001\000\002\001\001\000\006\031" +
    "\131\032\130\001\001\000\004\030\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\256\001\001" +
    "\000\004\013\147\001\001\000\006\020\150\037\152\001" +
    "\001\000\004\007\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\171\041\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\160\006\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\033\163\034\024\035\022\036\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\033" +
    "\167\034\024\035\022\036\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\173\022" +
    "\174\023\176\024\200\025\202\030\204\037\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\224\001" +
    "\001\000\002\001\001\000\004\030\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\210\001\001\000\002\001\001\000\004\030" +
    "\212\001\001\000\002\001\001\000\020\021\214\022\174" +
    "\023\176\024\200\025\202\030\204\037\203\001\001\000" +
    "\002\001\001\000\004\030\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\221\022\174\023\176\024" +
    "\200\025\202\030\204\037\203\001\001\000\002\001\001" +
    "\000\020\021\223\022\174\023\176\024\200\025\202\030" +
    "\204\037\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\226\022\174\023\176\024\200\025\202\030" +
    "\204\037\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\160\006\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\240\001\001\000" +
    "\004\011\242\001\001\000\004\017\246\001\001\000\004" +
    "\013\243\001\001\000\006\020\150\037\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\033\251\034\024\035\022\036\027\001" +
    "\001\000\002\001\001\000\012\033\253\034\024\035\022" +
    "\036\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\033\261\034\024\035\022\036\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_statement ::= FOR IDENTIFIER ASSIGN value TO value DO statement 
            {
              AbsStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int vloleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vloright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsValExpr vlo = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int vhileft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int vhiright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr vhi = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsValName n = new AbsValName(id);
			n.setBeg("", idleft, idright);
			n.setEnd("", aleft, aright);
			RESULT = new AbsForStmt(n, vlo, vhi, s); 
			RESULT.setBeg("", wleft, wright);  
			RESULT.setEnd(s);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("for_statement",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // while_statement ::= WHILE value DO statement 
            {
              AbsStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  RESULT = new AbsWhileStmt(ve, s);
			RESULT.setBeg("", wleft, wright);  
			RESULT.setEnd(s);
	    
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // list_statement2 ::= list_statement2 statement SEMIC 
            {
              AbsStmts RESULT =null;
		int slrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int slrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsStmts slr = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 	AbsStmts a = slr;
    		a.stmts.add(s); 
    		RESULT = a;    
    	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement2",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // list_statement2 ::= 
            {
              AbsStmts RESULT =null;
		 RESULT = new AbsStmts(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement2",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // list_statement ::= list_statement2 statement 
            {
              AbsStmts RESULT =null;
		int slrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int slrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts slr = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsStmts a = slr;
			a.stmts.add(s); 
			RESULT = a;    
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // list_statement ::= 
            {
              AbsStmts RESULT =null;
		 RESULT = new AbsStmts(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // multiple_statement ::= BEGIN list_statement END 
            {
              AbsBlockStmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int lstmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int lstmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts lstmt = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	RESULT = new AbsBlockStmt(lstmt);	
			RESULT.setBeg(b.toString(), bleft, bright);
			RESULT.setEnd(e.toString(), eleft, eright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("multiple_statement",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_statement ::= IF value THEN statement ELSE statement 
            {
              AbsStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsStmt s1 = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s2 = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			RESULT = new AbsIfStmt(ve, s1, s2);	
		 	RESULT.setBeg("", fleft, fright); 
		 	RESULT.setEnd(s2);  
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_statement ::= IF value THEN statement 
            {
              AbsStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			RESULT = new AbsIfStmt(ve, s, new AbsBlockStmt(new AbsStmts()));	
			RESULT.setBeg("", fleft, fright);
			RESULT.setEnd(s);	
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assign_statement ::= value ASSIGN value 
            {
              AbsStmt RESULT =null;
		int ve1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ve1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ve1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int ve2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ve2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			RESULT = new AbsAssignStmt(ve1, ve2);	
    		RESULT.setBeg("", ve1left, ve1right);
    		RESULT.setEnd(ve2);  
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("assign_statement",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= SEMIC 
            {
              AbsStmt RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= for_statement 
            {
              AbsStmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt fs = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = fs; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= while_statement 
            {
              AbsStmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt ws = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = ws; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= multiple_statement 
            {
              AbsStmt RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsBlockStmt ms = (AbsBlockStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = ms; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= if_statement 
            {
              AbsStmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt is = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = is; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= assign_statement 
            {
              AbsStmt RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt as = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = as; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= value 
            {
              AbsStmt RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsExprStmt(ve); RESULT.setPos(ve); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ptr_type ::= PTR type 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsPointerType(t); RESULT.setPos(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("ptr_type",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comp_descr_list ::= 
            {
              AbsDecls RESULT =null;
		 RESULT = new AbsDecls();	 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("comp_descr_list",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comp_descr_list ::= comp_descr_list IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls cd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			AbsDecls d = cd;
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg("", idleft, idright);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			d.decls.add(e); 
			RESULT = d; 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("comp_descr_list",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // record_type ::= RECORD comp_descr_list IDENTIFIER COLON type END 
            {
              AbsTypeExpr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls cd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = cd;
			d.setBeg("", rleft, rright);
			d.setEnd("", idleft, idright);
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg(d);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(end.toString(), endleft, endright); 
			d.decls.add(e); 
			RESULT = new AbsRecordType(d); 
			RESULT.setBeg(r.toString(), rleft, rright);
			RESULT.setEnd(end.toString(), endleft, endright);  
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_type",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // table_type ::= ARRAY LBRACKET value DOTS value RBRACKET OF type 
            {
              AbsTypeExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsValExpr lb = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int hbleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int hbright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsValExpr hb = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	RESULT = new AbsArrayType(te, lb, hb); 
			RESULT.setBeg(a.toString(), aleft, aright); 
			RESULT.setEnd(te); 
	    
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("table_type",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= LPARENTHESIS type RPARENTHESIS 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = t;  RESULT.setPos(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= ptr_type 
            {
              AbsTypeExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr pt = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = pt; RESULT.setPos(pt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= record_type 
            {
              AbsTypeExpr RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr rt = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = rt; RESULT.setPos(rt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= table_type 
            {
              AbsTypeExpr RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr tt = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = tt; RESULT.setPos(tt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= IDENTIFIER 
            {
              AbsTypeExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsTypeName(id); RESULT.setPos(id.toString(), idleft, idright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= BOOL 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomType(AbsAtomType.BOOL); RESULT.setPos(t.toString(), tleft, tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= CHAR 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomType(AbsAtomType.CHAR); RESULT.setPos(t.toString(), tleft, tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= INT 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomType(AbsAtomType.INT);  RESULT.setPos(t.toString(), tleft, tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value_params ::= value_params value COMMA 
            {
              AbsValExprs RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExprs vp = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		  AbsValExprs e = (AbsValExprs)vp;
			e.exprs.add((AbsValExpr)v);	
			RESULT = e;	
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_params",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value_params ::= 
            {
              AbsValExprs RESULT =null;
		  RESULT = new AbsValExprs(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_params",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value_list ::= value_params value 
            {
              AbsValExprs RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExprs vp = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsValExprs e = vp;
			e.exprs.add(v);	
			RESULT = e;	
			RESULT.setBeg("", vpleft, vpright);
			RESULT.setEnd(v);	
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value_list ::= 
            {
              AbsValExprs RESULT =null;
		  RESULT = new AbsValExprs(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // value ::= LPARENTHESIS value RPARENTHESIS 
            {
              AbsValExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = v; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= LBRACKET type RBRACKET 
            {
              AbsValExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		  RESULT = new AbsAlloc(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= IDENTIFIER LPARENTHESIS value_list RPARENTHESIS 
            {
              AbsValExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExprs vl = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsValName n = new AbsValName(id);
    		n.setBeg("", idleft, idright);
    		n.setEnd("", lpleft, lpright);
    		RESULT = new AbsCallExpr(n, vl);  	
    		RESULT.setBeg(n);
    		RESULT.setEnd(rp.toString(), rpleft, rpright);	
	    
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= value DOT value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.RECACCESS, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= value LBRACKET value RBRACKET 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.ARRACCESS, (AbsValExpr)v1, (AbsValExpr)v2); RESULT.setBeg(v1); RESULT.setEnd(v2);	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= IDENTIFIER 
            {
              AbsValExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsValName(id); RESULT.setPos(id.toString(), idleft, idright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= value OR value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.OR,  v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= value AND value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.AND, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= value GEQ value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.GEQ, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= value LEQ value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.LEQ, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= value GTH value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.GTH, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= value LTH value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.LTH, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= value NEQ value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.NEQ, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= value EQU value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.EQU, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= value SUB value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.SUB, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value ::= value ADD value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.ADD, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= value DIV value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.DIV, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= value MUL value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.MUL, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= value PTR 
            {
              AbsValExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.VAL, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= NOT value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.NOT, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= SUB value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.SUB, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= ADD value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.ADD, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= PTR value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.MEM, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= NIL 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsNilConst(); RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= BOOL_CONST 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomConst(c, AbsAtomConst.BOOL); RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= CHAR_CONST 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomConst(c, AbsAtomConst.CHAR); RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // value ::= INT_CONST 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomConst(c, AbsAtomConst.INT);  RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param_descr_list_r ::= 
            {
              AbsDecls RESULT =null;
		 	RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list_r",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param_descr_list_r ::= param_descr_list_r IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = par; 
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg(par);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			d.decls.add(e); 
			RESULT = d; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list_r",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_descr_list ::= 
            {
              AbsDecls RESULT =null;
		  RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_descr_list ::= param_descr_list_r IDENTIFIER COLON type 
            {
              AbsDecls RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = par; 
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg(par);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setPos(id.toString(), idleft, idright);
			d.decls.add(e); 
			RESULT = d; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // subprogram_head ::= FUNCTION IDENTIFIER LPARENTHESIS param_descr_list RPARENTHESIS COLON type SEMIC 
            {
              AbsDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDeclName n = new AbsDeclName(id);
			n.setBeg(id.toString(), idleft, idright); 
			n.setEnd(lp.toString(), lpleft, lpright);
			RESULT = new AbsFunDecl(n, par,  te, new AbsDecls(), new AbsBlockStmt(null));  
			RESULT.setBeg(f.toString(), fleft, fright); 
		 	RESULT.setEnd(s.toString(), sleft, sright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_head",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // subprogram_head ::= PROCEDURE IDENTIFIER LPARENTHESIS param_descr_list RPARENTHESIS SEMIC 
            {
              AbsDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDeclName n = new AbsDeclName(id);
			n.setBeg(id.toString(), idleft, idright); 
			n.setEnd(lp.toString(), lpleft, lpright);
			RESULT = new AbsProcDecl(n, par, new AbsDecls(), new AbsBlockStmt(null));  
			RESULT.setBeg(p.toString(), pleft, pright); 
		 	RESULT.setEnd(s.toString(), sleft, sright); 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_head",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // subprogram_declarations ::= 
            {
              AbsDecls RESULT =null;
		 	RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subprogram_declarations ::= subprogram_declarations subprogram_head constant_declarations type_declarations sub_variable_declarations subprogram_declarations multiple_statement SEMIC 
            {
              AbsDecls RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		AbsDecls sd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int shleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		AbsDecl sh = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsDecls cdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int tdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int tdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls tdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int vdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int vdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDecls vdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int sdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int sdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls sdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cmpstleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cmpstright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsBlockStmt cmpst = (AbsBlockStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		  /* deklaracije spr. funkcije/procedure in gnezdene funkcije/procedure  */    	
			AbsDecls dr = new AbsDecls();
			dr.decls.addAll(cdr.decls);
			dr.decls.addAll(tdr.decls);
			dr.decls.addAll(vdr.decls);
			dr.decls.addAll(sdr.decls);
			
			if(sh instanceof AbsProcDecl){
				((AbsProcDecl)sh).decls = dr;
				((AbsProcDecl)sh).stmt = (AbsBlockStmt)cmpst;
			}
			else{
				((AbsFunDecl)sh).decls = dr;
				((AbsFunDecl)sh).stmt = (AbsBlockStmt)cmpst;
			}
			
			AbsDecls d = (AbsDecls)sd;
			d.decls.add(sh);
			RESULT = d;
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vars ::= 
            {
              AbsDecls RESULT =null;
		 	RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vars ::= vars IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = vs; 
        	AbsDeclName n = new AbsDeclName(id);
        	n.setPos(id.toString(), idleft, idright);
        	AbsVarDecl e = new AbsVarDecl(n, te);
        	e.setPos(id.toString(), idleft, idright);
        	d.decls.add(e); 
        	RESULT = d;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sub_vars ::= 
            {
              AbsDecls RESULT =null;
		  RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("sub_vars",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sub_vars ::= sub_vars IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = vs; 
            AbsDeclName n = new AbsDeclName(id);
            n.setPos(id.toString(), idleft, idright);
            AbsVarDecl e = new AbsVarDecl(n, te);
            e.setPos(id.toString(), idleft, idright);
            d.decls.add(e); 
            RESULT = d;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("sub_vars",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sub_vars ::= sub_vars IDENTIFIER COLON SINGLE type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object single = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = vs; 
            AbsDeclName n = new AbsDeclName(id);
            n.single = true;
            n.setPos(id.toString(), idleft, idright);
            AbsVarDecl e = new AbsVarDecl(n, te);
            e.single = true;
            e.setPos(id.toString(), idleft, idright);
            d.decls.add(e); 
            RESULT = d;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("sub_vars",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_declarations ::= 
            {
              AbsDecls RESULT =null;
		 RESULT = new AbsDecls();	 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_declarations ::= VAR vars IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = vs; 
			AbsDeclName n = new AbsDeclName(id);
			n.setPos(id.toString(), idleft, idright);
			AbsVarDecl e = new AbsVarDecl(n, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			d.decls.add(e); 
			RESULT = d; 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("variable_declarations",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sub_variable_declarations ::= 
            {
              AbsDecls RESULT =null;
		 RESULT = new AbsDecls();  
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("sub_variable_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_variable_declarations ::= VAR sub_vars IDENTIFIER COLON SINGLE type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object single = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = vs; 
            AbsDeclName n = new AbsDeclName(id);
            n.setPos(id.toString(), idleft, idright);
            AbsVarDecl e = new AbsVarDecl(n, te);
            e.single = true;
            e.setBeg(id.toString(), idleft, idright);
            e.setEnd(s.toString(), sleft, sright); 
            d.decls.add(e); 
            RESULT = d; 
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("sub_variable_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sub_variable_declarations ::= VAR sub_vars IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = vs; 
            AbsDeclName n = new AbsDeclName(id);
            n.setPos(id.toString(), idleft, idright);
            AbsVarDecl e = new AbsVarDecl(n, te);
            e.setBeg(id.toString(), idleft, idright);
            e.setEnd(s.toString(), sleft, sright); 
            d.decls.add(e); 
            RESULT = d; 
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("sub_variable_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration ::= IDENTIFIER EQU type SEMIC 
            {
              AbsTypeDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			AbsDeclName n = new AbsDeclName(id);
			n.setPos(id.toString(), idleft, idright);
			AbsTypeDecl e = new AbsTypeDecl(n, t);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			RESULT = e;
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declaration",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // types ::= type_declaration 
            {
              AbsDecls RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeDecl td = (AbsTypeDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls a =  new AbsDecls(); a.decls.add(td);  RESULT = a; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // types ::= types type_declaration 
            {
              AbsDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls t = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeDecl td = (AbsTypeDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = t; d.decls.add(td); RESULT = d; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declarations ::= TYPE types 
            {
              AbsDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecls t = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  RESULT = t;	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_declarations ::= 
            {
              AbsDecls RESULT =null;
		  RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant ::= IDENTIFIER EQU value SEMIC 
            {
              AbsConstDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDeclName name = new AbsDeclName(id);
            name.setPos(id.toString(), idleft, idright);
            
            AbsConstDecl cons = new AbsConstDecl(name, v);
            cons.setBeg(id.toString(), idleft, idright);
            cons.setEnd(s.toString(), sleft, sright);
            RESULT = cons;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constants ::= 
            {
              AbsDecls RESULT =null;
		  RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constants ::= constants constant 
            {
              AbsDecls RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls cs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsConstDecl c = (AbsConstDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			AbsDecls d = cs;
            d.decls.add(c); 
            RESULT = d;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constant_declarations ::= CONST constants constant 
            {
              AbsDecls RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls cs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsConstDecl c = (AbsConstDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = cs;
            d.decls.add(c); 
            RESULT = d; 
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_declarations",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constant_declarations ::= 
            {
              AbsDecls RESULT =null;
		 RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_declarations",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_indication ::= IDENTIFIER SEMIC 
            {
              AbsDeclName RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  RESULT = new AbsDeclName(pName);
        	RESULT.setBeg(pName.toString(), pNameleft, pNameright);
        	RESULT.setEnd(s.toString(), sleft, sright);
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program_indication",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= PROGRAM program_indication constant_declarations type_declarations variable_declarations subprogram_declarations multiple_statement DOT 
            {
              AbsTree RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		AbsDeclName program = (AbsDeclName)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsDecls cd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls td = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDecls vd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls sd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int mstmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int mstmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsBlockStmt mstmt = (AbsBlockStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object dot = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = new AbsDecls();
            d.decls.addAll(cd.decls);
            d.decls.addAll(td.decls);
        	d.decls.addAll(vd.decls);
        	d.decls.addAll(sd.decls); 
        	
            d.setBeg(program.toString(), programleft, programright);
            d.setEnd(mstmt.toString(), mstmtleft, mstmtright);
            
            AbsProgram p = new AbsProgram(program, d, mstmt);
            p.setBeg(pr.toString(), prleft, prright);
            p.setEnd(dot.toString(), dotleft, dotright);
            
            RESULT = p;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree start_val = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

