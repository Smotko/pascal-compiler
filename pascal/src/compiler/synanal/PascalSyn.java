
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 19 20:49:24 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;
import compiler.abstree.*;
import compiler.abstree.tree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 19 20:49:24 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\007\002\000\002\007\005\000\002\014\004" +
    "\000\002\014\002\000\002\024\006\000\002\010\002\000" +
    "\002\010\004\000\002\013\004\000\002\013\003\000\002" +
    "\025\006\000\002\011\010\000\002\011\002\000\002\015" +
    "\007\000\002\015\002\000\002\012\012\000\002\012\002" +
    "\000\002\016\010\000\002\016\012\000\002\006\006\000" +
    "\002\006\002\000\002\005\007\000\002\005\002\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\026\006\000" +
    "\002\026\005\000\002\026\006\000\002\026\005\000\002" +
    "\026\005\000\002\027\002\000\002\027\004\000\002\030" +
    "\002\000\002\030\005\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\005\000\002" +
    "\033\012\000\002\034\010\000\002\004\007\000\002\004" +
    "\002\000\002\032\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\023\005\000\002" +
    "\020\006\000\002\020\010\000\002\035\005\000\002\036" +
    "\002\000\002\036\004\000\002\037\002\000\002\037\005" +
    "\000\002\021\006\000\002\022\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\064\005\001\002\000\004\002\261\001" +
    "\002\000\004\010\007\001\002\000\016\052\ufffe\053\011" +
    "\060\ufffe\063\ufffe\070\ufffe\071\ufffe\001\002\000\004\025" +
    "\010\001\002\000\016\052\uffff\053\uffff\060\uffff\063\uffff" +
    "\070\uffff\071\uffff\001\002\000\004\010\ufffb\001\002\000" +
    "\014\052\ufff9\060\ufff9\063\ufff9\070\014\071\ufff9\001\002" +
    "\000\012\052\ufff3\060\ufff3\063\ufff3\071\146\001\002\000" +
    "\004\011\017\001\002\000\014\011\ufff6\052\ufff6\060\ufff6" +
    "\063\ufff6\071\ufff6\001\002\000\014\011\017\052\ufff8\060" +
    "\ufff8\063\ufff8\071\ufff8\001\002\000\004\031\020\001\002" +
    "\000\022\011\032\012\024\013\034\014\021\022\022\043" +
    "\031\050\026\065\027\001\002\000\012\023\uffc9\024\uffc9" +
    "\025\uffc9\056\uffc9\001\002\000\022\011\032\012\024\013" +
    "\034\014\021\022\022\043\031\050\026\065\027\001\002" +
    "\000\012\023\uffc5\024\uffc5\025\uffc5\056\uffc5\001\002\000" +
    "\012\023\uffc7\024\uffc7\025\uffc7\056\uffc7\001\002\000\012" +
    "\023\uffc3\024\uffc3\025\uffc3\056\uffc3\001\002\000\004\021" +
    "\045\001\002\000\004\010\uffbe\001\002\000\012\023\uffc4" +
    "\024\uffc4\025\uffc4\056\uffc4\001\002\000\022\011\032\012" +
    "\024\013\034\014\021\022\022\043\031\050\026\065\027" +
    "\001\002\000\012\023\uffc6\024\uffc6\025\uffc6\056\uffc6\001" +
    "\002\000\004\025\035\001\002\000\012\023\uffc8\024\uffc8" +
    "\025\uffc8\056\uffc8\001\002\000\014\011\ufff5\052\ufff5\060" +
    "\ufff5\063\ufff5\071\ufff5\001\002\000\012\023\uffbd\024\uffbd" +
    "\025\uffbd\056\uffbd\001\002\000\004\010\040\001\002\000" +
    "\004\015\041\001\002\000\022\011\032\012\024\013\034" +
    "\014\021\022\022\043\031\050\026\065\027\001\002\000" +
    "\006\025\043\056\044\001\002\000\004\010\uffbf\001\002" +
    "\000\012\023\uffc0\024\uffc0\025\uffc0\056\uffc0\001\002\000" +
    "\030\004\051\005\055\006\047\007\050\010\056\021\061" +
    "\022\046\026\052\041\057\043\053\044\054\001\002\000" +
    "\030\004\051\005\055\006\047\007\050\010\056\021\061" +
    "\022\046\026\052\041\057\043\053\044\054\001\002\000" +
    "\066\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\051\uffe8\054\uffe8\055\uffe8\056\uffe8\066\uffe8\067" +
    "\uffe8\001\002\000\066\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5\040\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\051\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\066\uffe5\067\uffe5\001\002\000\066\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\051\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\066\uffe6\067\uffe6\001\002\000\030" +
    "\004\051\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\052\041\057\043\053\044\054\001\002\000\030" +
    "\004\051\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\052\041\057\043\053\044\054\001\002\000\030" +
    "\004\051\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\052\041\057\043\053\044\054\001\002\000\066" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\051\uffe7\054\uffe7\055\uffe7\056\uffe7\066\uffe7\067\uffe7" +
    "\001\002\000\070\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\130\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\051\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\066\uffd3\067\uffd3\001\002\000\030\004\051\005" +
    "\055\006\047\007\050\010\056\021\061\022\046\026\052" +
    "\041\057\043\053\044\054\001\002\000\042\017\076\020" +
    "\072\021\101\026\071\027\064\030\075\031\066\032\100" +
    "\033\065\034\103\035\067\037\077\040\070\042\102\043" +
    "\073\044\074\001\002\000\022\011\032\012\024\013\034" +
    "\014\021\022\022\043\031\050\026\065\027\001\002\000" +
    "\004\023\063\001\002\000\066\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf" +
    "\040\uffcf\042\uffcf\043\uffcf\044\uffcf\051\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\066\uffcf\067\uffcf\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\066\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\051" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\066\uffe0\067\uffe0\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\030\004\051\005\055\006\047\007\050\010\056\021" +
    "\061\022\046\026\052\041\057\043\053\044\054\001\002" +
    "\000\052\016\uffd7\017\076\020\uffd7\021\101\023\uffd7\024" +
    "\uffd7\025\uffd7\026\071\027\uffd7\030\075\037\077\042\uffd7" +
    "\043\073\044\074\051\uffd7\054\uffd7\055\uffd7\056\uffd7\066" +
    "\uffd7\067\uffd7\001\002\000\066\016\uffd4\017\076\020\uffd4" +
    "\021\101\023\uffd4\024\uffd4\025\uffd4\026\071\027\064\030" +
    "\075\031\066\032\100\033\065\034\103\035\067\037\077" +
    "\040\070\042\uffd4\043\073\044\074\051\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\066\uffd4\067\uffd4\001\002\000\042\017\076" +
    "\021\101\023\107\026\071\027\064\030\075\031\066\032" +
    "\100\033\065\034\103\035\067\037\077\040\070\042\102" +
    "\043\073\044\074\001\002\000\066\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037" +
    "\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\051\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\066\uffd2\067\uffd2\001\002\000\052\016" +
    "\uffd6\017\076\020\uffd6\021\101\023\uffd6\024\uffd6\025\uffd6" +
    "\026\071\027\uffd6\030\075\037\077\042\uffd6\043\073\044" +
    "\074\051\uffd6\054\uffd6\055\uffd6\056\uffd6\066\uffd6\067\uffd6" +
    "\001\002\000\066\016\uffdf\017\076\020\uffdf\021\101\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\042" +
    "\uffdf\043\073\044\uffdf\051\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\066\uffdf\067\uffdf\001\002\000\066\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037" +
    "\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\051\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\066\uffd1\067\uffd1\001\002\000\066\016" +
    "\uffde\017\076\020\uffde\021\101\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\037\uffde\040\uffde\042\uffde\043\073\044\uffde" +
    "\051\uffde\054\uffde\055\uffde\056\uffde\066\uffde\067\uffde\001" +
    "\002\000\066\016\uffdc\017\076\020\uffdc\021\101\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\075\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\037\077\040\uffdc\042\uffdc" +
    "\043\073\044\uffdc\051\uffdc\054\uffdc\055\uffdc\056\uffdc\066" +
    "\uffdc\067\uffdc\001\002\000\042\017\076\021\101\023\116" +
    "\026\071\027\064\030\075\031\066\032\100\033\065\034" +
    "\103\035\067\037\077\040\070\042\102\043\073\044\074" +
    "\001\002\000\004\062\117\001\002\000\022\011\032\012" +
    "\024\013\034\014\021\022\022\043\031\050\026\065\027" +
    "\001\002\000\012\023\uffc1\024\uffc1\025\uffc1\056\uffc1\001" +
    "\002\000\066\016\uffdd\017\076\020\uffdd\021\101\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\075\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\037\077\040\uffdd\042\uffdd" +
    "\043\073\044\uffdd\051\uffdd\054\uffdd\055\uffdd\056\uffdd\066" +
    "\uffdd\067\uffdd\001\002\000\052\016\uffda\017\076\020\uffda" +
    "\021\101\023\uffda\024\uffda\025\uffda\026\071\027\uffda\030" +
    "\075\037\077\042\uffda\043\073\044\074\051\uffda\054\uffda" +
    "\055\uffda\056\uffda\066\uffda\067\uffda\001\002\000\052\016" +
    "\uffd9\017\076\020\uffd9\021\101\023\uffd9\024\uffd9\025\uffd9" +
    "\026\071\027\uffd9\030\075\037\077\042\uffd9\043\073\044" +
    "\074\051\uffd9\054\uffd9\055\uffd9\056\uffd9\066\uffd9\067\uffd9" +
    "\001\002\000\052\016\uffdb\017\076\020\uffdb\021\101\023" +
    "\uffdb\024\uffdb\025\uffdb\026\071\027\uffdb\030\075\037\077" +
    "\042\uffdb\043\073\044\074\051\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\066\uffdb\067\uffdb\001\002\000\052\016\uffd8\017\076" +
    "\020\uffd8\021\101\023\uffd8\024\uffd8\025\uffd8\026\071\027" +
    "\uffd8\030\075\037\077\042\uffd8\043\073\044\074\051\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\066\uffd8\067\uffd8\001\002\000" +
    "\066\016\uffd5\017\076\020\uffd5\021\101\023\uffd5\024\uffd5" +
    "\025\uffd5\026\071\027\uffd5\030\075\031\066\032\100\033" +
    "\065\034\103\035\067\037\077\040\070\042\uffd5\043\073" +
    "\044\074\051\uffd5\054\uffd5\055\uffd5\056\uffd5\066\uffd5\067" +
    "\uffd5\001\002\000\066\016\uffe1\017\076\020\uffe1\021\101" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\043\073\044\uffe1\051\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\066\uffe1\067\uffe1\001\002\000\032\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\021\uffcb\022\uffcb\024\uffcd\026" +
    "\uffcb\041\uffcb\043\uffcb\044\uffcb\001\002\000\030\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\026" +
    "\052\041\057\043\053\044\054\001\002\000\004\024\133" +
    "\001\002\000\066\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\066\uffd0\067\uffd0\001\002\000\044\016\135\017\076\021" +
    "\101\024\uffcc\026\071\027\064\030\075\031\066\032\100" +
    "\033\065\034\103\035\067\037\077\040\070\042\102\043" +
    "\073\044\074\001\002\000\030\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\021\uffca\022\uffca\026\uffca\041\uffca\043" +
    "\uffca\044\uffca\001\002\000\066\016\uffe2\017\076\020\uffe2" +
    "\021\101\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\044\uffe2\051\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\066\uffe2\067\uffe2\001\002\000\066\016\uffe4" +
    "\017\076\020\uffe4\021\101\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\051" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\066\uffe4\067\uffe4\001\002" +
    "\000\066\016\uffe3\017\076\020\uffe3\021\101\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\037\uffe3\040\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3\066\uffe3" +
    "\067\uffe3\001\002\000\042\017\076\021\101\024\142\026" +
    "\071\027\064\030\075\031\066\032\100\033\065\034\103" +
    "\035\067\037\077\040\070\042\102\043\073\044\074\001" +
    "\002\000\066\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\037\uffce\040\uffce\042\uffce" +
    "\043\uffce\044\uffce\051\uffce\054\uffce\055\uffce\056\uffce\066" +
    "\uffce\067\uffce\001\002\000\004\024\144\001\002\000\012" +
    "\023\uffc2\024\uffc2\025\uffc2\056\uffc2\001\002\000\014\011" +
    "\ufff7\052\ufff7\060\ufff7\063\ufff7\071\ufff7\001\002\000\004" +
    "\010\ufff1\001\002\000\010\052\uffef\060\uffef\063\uffef\001" +
    "\002\000\010\052\154\060\155\063\152\001\002\000\016" +
    "\052\ufffe\053\011\060\ufffe\063\ufffe\070\ufffe\071\ufffe\001" +
    "\002\000\004\010\233\001\002\000\004\017\232\001\002" +
    "\000\044\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\021" +
    "\uffaf\022\uffaf\025\uffaf\026\uffaf\041\uffaf\043\uffaf\044\uffaf" +
    "\052\uffaf\056\uffb1\057\uffaf\061\uffaf\072\uffaf\001\002\000" +
    "\004\010\156\001\002\000\004\022\157\001\002\000\006" +
    "\010\uffe9\024\uffeb\001\002\000\004\024\166\001\002\000" +
    "\004\010\162\001\002\000\004\015\163\001\002\000\022" +
    "\011\032\012\024\013\034\014\021\022\022\043\031\050" +
    "\026\065\027\001\002\000\006\024\uffec\025\165\001\002" +
    "\000\004\010\uffea\001\002\000\004\015\167\001\002\000" +
    "\022\011\032\012\024\013\034\014\021\022\022\043\031" +
    "\050\026\065\027\001\002\000\004\025\171\001\002\000" +
    "\016\052\uffed\053\uffed\060\uffed\063\uffed\070\uffed\071\uffed" +
    "\001\002\000\004\056\231\001\002\000\042\004\051\005" +
    "\055\006\047\007\050\010\056\021\061\022\046\025\202" +
    "\026\052\041\057\043\053\044\054\052\154\057\206\061" +
    "\200\072\176\001\002\000\006\025\230\056\uffb0\001\002" +
    "\000\010\025\uffba\055\uffba\056\uffba\001\002\000\030\004" +
    "\051\005\055\006\047\007\050\010\056\021\061\022\046" +
    "\026\052\041\057\043\053\044\054\001\002\000\010\025" +
    "\uffb8\055\uffb8\056\uffb8\001\002\000\030\004\051\005\055" +
    "\006\047\007\050\010\056\021\061\022\046\026\052\041" +
    "\057\043\053\044\054\001\002\000\010\025\uffb7\055\uffb7" +
    "\056\uffb7\001\002\000\010\025\uffb6\055\uffb6\056\uffb6\001" +
    "\002\000\010\025\uffbb\055\uffbb\056\uffbb\001\002\000\010" +
    "\025\uffb9\055\uffb9\056\uffb9\001\002\000\050\017\076\021" +
    "\101\025\uffbc\026\071\027\064\030\075\031\066\032\100" +
    "\033\065\034\103\035\067\037\077\040\070\042\102\043" +
    "\073\044\074\051\216\055\uffbc\056\uffbc\001\002\000\004" +
    "\010\207\001\002\000\004\051\210\001\002\000\030\004" +
    "\051\005\055\006\047\007\050\010\056\021\061\022\046" +
    "\026\052\041\057\043\053\044\054\001\002\000\042\017" +
    "\076\021\101\026\071\027\064\030\075\031\066\032\100" +
    "\033\065\034\103\035\067\037\077\040\070\042\102\043" +
    "\073\044\074\067\212\001\002\000\030\004\051\005\055" +
    "\006\047\007\050\010\056\021\061\022\046\026\052\041" +
    "\057\043\053\044\054\001\002\000\042\017\076\021\101" +
    "\026\071\027\064\030\075\031\066\032\100\033\065\034" +
    "\103\035\067\037\077\040\070\042\102\043\073\044\074" +
    "\054\214\001\002\000\042\004\051\005\055\006\047\007" +
    "\050\010\056\021\061\022\046\025\202\026\052\041\057" +
    "\043\053\044\054\052\154\057\206\061\200\072\176\001" +
    "\002\000\010\025\uffac\055\uffac\056\uffac\001\002\000\030" +
    "\004\051\005\055\006\047\007\050\010\056\021\061\022" +
    "\046\026\052\041\057\043\053\044\054\001\002\000\046" +
    "\017\076\021\101\025\uffb5\026\071\027\064\030\075\031" +
    "\066\032\100\033\065\034\103\035\067\037\077\040\070" +
    "\042\102\043\073\044\074\055\uffb5\056\uffb5\001\002\000" +
    "\042\017\076\021\101\026\071\027\064\030\075\031\066" +
    "\032\100\033\065\034\103\035\067\037\077\040\070\042" +
    "\102\043\073\044\074\066\221\001\002\000\042\004\051" +
    "\005\055\006\047\007\050\010\056\021\061\022\046\025" +
    "\202\026\052\041\057\043\053\044\054\052\154\057\206" +
    "\061\200\072\176\001\002\000\010\025\uffb4\055\223\056" +
    "\uffb4\001\002\000\042\004\051\005\055\006\047\007\050" +
    "\010\056\021\061\022\046\025\202\026\052\041\057\043" +
    "\053\044\054\052\154\057\206\061\200\072\176\001\002" +
    "\000\010\025\uffb3\055\uffb3\056\uffb3\001\002\000\042\017" +
    "\076\021\101\026\071\027\064\030\075\031\066\032\100" +
    "\033\065\034\103\035\067\037\077\040\070\042\102\043" +
    "\073\044\074\054\226\001\002\000\042\004\051\005\055" +
    "\006\047\007\050\010\056\021\061\022\046\025\202\026" +
    "\052\041\057\043\053\044\054\052\154\057\206\061\200" +
    "\072\176\001\002\000\010\025\uffad\055\uffad\056\uffad\001" +
    "\002\000\042\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\021\uffae\022\uffae\025\uffae\026\uffae\041\uffae\043\uffae\044" +
    "\uffae\052\uffae\057\uffae\061\uffae\072\uffae\001\002\000\012" +
    "\017\uffb2\025\uffb2\055\uffb2\056\uffb2\001\002\000\004\002" +
    "\000\001\002\000\004\022\234\001\002\000\006\010\uffe9" +
    "\024\uffeb\001\002\000\004\024\236\001\002\000\004\025" +
    "\237\001\002\000\016\052\uffee\053\uffee\060\uffee\063\uffee" +
    "\070\uffee\071\uffee\001\002\000\014\052\ufff9\060\ufff9\063" +
    "\ufff9\070\014\071\ufff9\001\002\000\012\052\ufff3\060\ufff3" +
    "\063\ufff3\071\146\001\002\000\010\052\uffef\060\uffef\063" +
    "\uffef\001\002\000\010\052\154\060\155\063\152\001\002" +
    "\000\004\025\245\001\002\000\010\052\ufff0\060\ufff0\063" +
    "\ufff0\001\002\000\004\010\247\001\002\000\004\015\250" +
    "\001\002\000\022\011\032\012\024\013\034\014\021\022" +
    "\022\043\031\050\026\065\027\001\002\000\004\025\252" +
    "\001\002\000\012\010\ufff2\052\ufff4\060\ufff4\063\ufff4\001" +
    "\002\000\004\010\255\001\002\000\016\010\ufffc\052\ufffd" +
    "\060\ufffd\063\ufffd\070\ufffd\071\ufffd\001\002\000\004\031" +
    "\256\001\002\000\030\004\051\005\055\006\047\007\050" +
    "\010\056\021\061\022\046\026\052\041\057\043\053\044" +
    "\054\001\002\000\042\017\076\021\101\025\260\026\071" +
    "\027\064\030\075\031\066\032\100\033\065\034\103\035" +
    "\067\037\077\040\070\042\102\043\073\044\074\001\002" +
    "\000\016\010\ufffa\052\ufffa\060\ufffa\063\ufffa\070\ufffa\071" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\252\001\001\000" +
    "\004\010\012\001\001\000\004\011\146\001\001\000\006" +
    "\013\015\025\014\001\001\000\002\001\001\000\004\025" +
    "\144\001\001\000\002\001\001\000\012\031\032\032\024" +
    "\033\022\034\027\001\001\000\002\001\001\000\012\031" +
    "\142\032\024\033\022\034\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\036\001\001\000\002\001\001\000\012\031\035" +
    "\032\024\033\022\034\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\041\032\024\033\022\034\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\057\001" +
    "\001\000\004\026\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\137\001\001\000" +
    "\004\026\136\001\001\000\004\026\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\126\001\001\000" +
    "\002\001\001\000\012\031\061\032\024\033\022\034\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\125\001\001\000\004\026\124\001\001\000\004\026\123" +
    "\001\001\000\004\026\122\001\001\000\004\026\121\001" +
    "\001\000\004\026\120\001\001\000\004\026\114\001\001" +
    "\000\002\001\001\000\004\026\113\001\001\000\004\026" +
    "\112\001\001\000\004\026\111\001\001\000\004\026\110" +
    "\001\001\000\004\026\107\001\001\000\004\026\105\001" +
    "\001\000\004\026\104\001\001\000\004\026\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\117\032\024\033\022" +
    "\034\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\131\030\130\001\001\000\004\026\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\245\001\001" +
    "\000\004\012\147\001\001\000\006\016\150\035\152\001" +
    "\001\000\004\007\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\171\037\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\160\006\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\163\032\024\033\022\034\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\167\032\024\033\022\034\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\173\020" +
    "\174\021\176\022\200\023\202\026\204\035\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\224\001" +
    "\001\000\002\001\001\000\004\026\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\210\001\001\000\002\001\001\000\004\026" +
    "\212\001\001\000\002\001\001\000\020\017\214\020\174" +
    "\021\176\022\200\023\202\026\204\035\203\001\001\000" +
    "\002\001\001\000\004\026\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\221\020\174\021\176\022" +
    "\200\023\202\026\204\035\203\001\001\000\002\001\001" +
    "\000\020\017\223\020\174\021\176\022\200\023\202\026" +
    "\204\035\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\226\020\174\021\176\022\200\023\202\026" +
    "\204\035\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\160\006\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\240\001\001\000" +
    "\004\011\241\001\001\000\004\012\242\001\001\000\006" +
    "\016\150\035\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\250" +
    "\032\024\033\022\034\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_statement ::= FOR IDENTIFIER ASSIGN value TO value DO statement 
            {
              AbsStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int vloleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vloright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsValExpr vlo = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int vhileft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int vhiright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr vhi = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsValName n = new AbsValName(id);
			n.setBeg("", idleft, idright);
			n.setEnd("", aleft, aright);
			RESULT = new AbsForStmt(n, vlo, vhi, s); 
			RESULT.setBeg("", wleft, wright);  
			RESULT.setEnd(s);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("for_statement",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // while_statement ::= WHILE value DO statement 
            {
              AbsStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  RESULT = new AbsWhileStmt(ve, s);
			RESULT.setBeg("", wleft, wright);  
			RESULT.setEnd(s);
	    
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("while_statement",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // list_statement2 ::= list_statement2 statement SEMIC 
            {
              AbsStmts RESULT =null;
		int slrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int slrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsStmts slr = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 	AbsStmts a = slr;
    		a.stmts.add(s); 
    		RESULT = a;    
    	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement2",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // list_statement2 ::= 
            {
              AbsStmts RESULT =null;
		 RESULT = new AbsStmts(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement2",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // list_statement ::= list_statement2 statement 
            {
              AbsStmts RESULT =null;
		int slrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int slrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts slr = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsStmts a = slr;
			a.stmts.add(s); 
			RESULT = a;    
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // list_statement ::= 
            {
              AbsStmts RESULT =null;
		 RESULT = new AbsStmts(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("list_statement",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // multiple_statement ::= BEGIN list_statement END 
            {
              AbsBlockStmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int lstmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int lstmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsStmts lstmt = (AbsStmts)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	RESULT = new AbsBlockStmt(lstmt);	
			RESULT.setBeg(b.toString(), bleft, bright);
			RESULT.setEnd(e.toString(), eleft, eright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("multiple_statement",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_statement ::= IF value THEN statement ELSE statement 
            {
              AbsStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsStmt s1 = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s2 = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			RESULT = new AbsIfStmt(ve, s1, s2);	
		 	RESULT.setBeg("", fleft, fright); 
		 	RESULT.setEnd(s2);  
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_statement ::= IF value THEN statement 
            {
              AbsStmt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt s = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			RESULT = new AbsIfStmt(ve, s, new AbsBlockStmt(new AbsStmts()));	
			RESULT.setBeg("", fleft, fright);
			RESULT.setEnd(s);	
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assign_statement ::= value ASSIGN value 
            {
              AbsStmt RESULT =null;
		int ve1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int ve1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr ve1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int ve2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ve2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			RESULT = new AbsAssignStmt(ve1, ve2);	
    		RESULT.setBeg("", ve1left, ve1right);
    		RESULT.setEnd(ve2);  
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("assign_statement",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= SEMIC 
            {
              AbsStmt RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= for_statement 
            {
              AbsStmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt fs = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = fs; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= while_statement 
            {
              AbsStmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt ws = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = ws; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= multiple_statement 
            {
              AbsStmt RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsBlockStmt ms = (AbsBlockStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = ms; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= if_statement 
            {
              AbsStmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt is = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = is; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= assign_statement 
            {
              AbsStmt RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsStmt as = (AbsStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = as; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= value 
            {
              AbsStmt RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr ve = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsExprStmt(ve); RESULT.setPos(ve); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ptr_type ::= PTR type 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsPointerType(t); RESULT.setPos(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("ptr_type",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comp_descr_list ::= 
            {
              AbsDecls RESULT =null;
		 RESULT = new AbsDecls();	 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("comp_descr_list",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comp_descr_list ::= comp_descr_list IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls cd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			AbsDecls d = cd;
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg("", idleft, idright);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			d.decls.add(e); 
			RESULT = d; 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("comp_descr_list",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // record_type ::= RECORD comp_descr_list IDENTIFIER COLON type END 
            {
              AbsTypeExpr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls cd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = cd;
			d.setBeg("", rleft, rright);
			d.setEnd("", idleft, idright);
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg(d);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(end.toString(), endleft, endright); 
			d.decls.add(e); 
			RESULT = new AbsRecordType(d); 
			RESULT.setBeg(r.toString(), rleft, rright);
			RESULT.setEnd(end.toString(), endleft, endright);  
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_type",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // table_type ::= ARRAY LBRACKET value DOTS value RBRACKET OF type 
            {
              AbsTypeExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsValExpr lb = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int hbleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int hbright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsValExpr hb = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	RESULT = new AbsArrayType(te, lb, hb); 
			RESULT.setBeg(a.toString(), aleft, aright); 
			RESULT.setEnd(te); 
	    
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("table_type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= LPARENTHESIS type RPARENTHESIS 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = t;  RESULT.setPos(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= ptr_type 
            {
              AbsTypeExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr pt = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = pt; RESULT.setPos(pt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= record_type 
            {
              AbsTypeExpr RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr rt = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = rt; RESULT.setPos(rt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= table_type 
            {
              AbsTypeExpr RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr tt = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = tt; RESULT.setPos(tt); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= TYPE_IDENTIFIER 
            {
              AbsTypeExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsTypeName(id); RESULT.setPos(id.toString(), idleft, idright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= BOOL 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomType(AbsAtomType.BOOL); RESULT.setPos(t.toString(), tleft, tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= CHAR 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomType(AbsAtomType.CHAR); RESULT.setPos(t.toString(), tleft, tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= INT 
            {
              AbsTypeExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomType(AbsAtomType.INT);  RESULT.setPos(t.toString(), tleft, tright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value_params ::= value_params value COMMA 
            {
              AbsValExprs RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExprs vp = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		  AbsValExprs e = (AbsValExprs)vp;
			e.exprs.add((AbsValExpr)v);	
			RESULT = e;	
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_params",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value_params ::= 
            {
              AbsValExprs RESULT =null;
		  RESULT = new AbsValExprs(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_params",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value_list ::= value_params value 
            {
              AbsValExprs RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExprs vp = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsValExprs e = vp;
			e.exprs.add(v);	
			RESULT = e;	
			RESULT.setBeg("", vpleft, vpright);
			RESULT.setEnd(v);	
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value_list ::= 
            {
              AbsValExprs RESULT =null;
		  RESULT = new AbsValExprs(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_list",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= LPARENTHESIS value RPARENTHESIS 
            {
              AbsValExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = v; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= LBRACKET type RBRACKET 
            {
              AbsValExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		  RESULT = new AbsAlloc(t); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= IDENTIFIER LPARENTHESIS value_list RPARENTHESIS 
            {
              AbsValExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExprs vl = (AbsValExprs)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsValName n = new AbsValName(id);
    		n.setBeg("", idleft, idright);
    		n.setEnd("", lpleft, lpright);
    		RESULT = new AbsCallExpr(n, vl);  	
    		RESULT.setBeg(n);
    		RESULT.setEnd(rp.toString(), rpleft, rpright);	
	    
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= value DOT value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.RECACCESS, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= value LBRACKET value RBRACKET 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.ARRACCESS, (AbsValExpr)v1, (AbsValExpr)v2); RESULT.setBeg(v1); RESULT.setEnd(v2);	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= IDENTIFIER 
            {
              AbsValExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsValName(id); RESULT.setPos(id.toString(), idleft, idright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= value OR value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.OR,  v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= value AND value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.AND, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= value GEQ value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.GEQ, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value ::= value LEQ value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.LEQ, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= value GTH value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.GTH, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= value LTH value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.LTH, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= value NEQ value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.NEQ, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= value EQU value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.EQU, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= value SUB value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.SUB, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= value ADD value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.ADD, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= value DIV value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.DIV, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= value MUL value 
            {
              AbsValExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsValExpr v1 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v2 = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsBinExpr(AbsBinExpr.MUL, v1, v2); RESULT.setBeg(v1); RESULT.setEnd(v2); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= value PTR 
            {
              AbsValExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.VAL, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= NOT value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.NOT, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // value ::= SUB value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.SUB, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // value ::= ADD value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.ADD, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // value ::= PTR value 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsUnExpr(AbsUnExpr.MEM, v); RESULT.setBeg(v); RESULT.setEnd(v); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= NIL 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsNilConst(); RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= BOOL_CONST 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomConst(c, AbsAtomConst.BOOL); RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= CHAR_CONST 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomConst(c, AbsAtomConst.CHAR); RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= INT_CONST 
            {
              AbsValExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 RESULT = new AbsAtomConst(c, AbsAtomConst.INT);  RESULT.setPos(c.toString(), cleft, cright); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param_descr_list_r ::= 
            {
              AbsDecls RESULT =null;
		 	RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list_r",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param_descr_list_r ::= param_descr_list_r IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = par; 
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg(par);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			d.decls.add(e); 
			RESULT = d; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list_r",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param_descr_list ::= 
            {
              AbsDecls RESULT =null;
		  RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param_descr_list ::= param_descr_list_r IDENTIFIER COLON type 
            {
              AbsDecls RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = par; 
			AbsDeclName dn = new AbsDeclName(id);
			dn.setBeg(par);
			dn.setEnd("", cleft, cright);
			AbsVarDecl e = new AbsVarDecl(dn, te);
			e.setPos(id.toString(), idleft, idright);
			d.decls.add(e); 
			RESULT = d; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("param_descr_list",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // subprogram_head ::= FUNCTION IDENTIFIER LPARENTHESIS param_descr_list RPARENTHESIS COLON type SEMIC 
            {
              AbsDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDeclName n = new AbsDeclName(id);
			n.setBeg(id.toString(), idleft, idright); 
			n.setEnd(lp.toString(), lpleft, lpright);
			RESULT = new AbsFunDecl(n, par,  te, new AbsDecls(), new AbsBlockStmt(null));  
			RESULT.setBeg(f.toString(), fleft, fright); 
		 	RESULT.setEnd(s.toString(), sleft, sright);
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_head",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // subprogram_head ::= PROCEDURE IDENTIFIER LPARENTHESIS param_descr_list RPARENTHESIS SEMIC 
            {
              AbsDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls par = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDeclName n = new AbsDeclName(id);
			n.setBeg(id.toString(), idleft, idright); 
			n.setEnd(lp.toString(), lpleft, lpright);
			RESULT = new AbsProcDecl(n, par, new AbsDecls(), new AbsBlockStmt(null));  
			RESULT.setBeg(p.toString(), pleft, pright); 
		 	RESULT.setEnd(s.toString(), sleft, sright); 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_head",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // subprogram_declarations ::= 
            {
              AbsDecls RESULT =null;
		 	RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // subprogram_declarations ::= subprogram_declarations subprogram_head constant_declarations type_declarations variable_declarations subprogram_declarations multiple_statement SEMIC 
            {
              AbsDecls RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		AbsDecls sd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int shleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		AbsDecl sh = (AbsDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int cdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int cdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsDecls cdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int tdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int tdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls tdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int vdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int vdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDecls vdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int sdrleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int sdrright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls sdr = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int cmpstleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int cmpstright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsBlockStmt cmpst = (AbsBlockStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		  /* deklaracije spr. funkcije/procedure in gnezdene funkcije/procedure  */    						  						
			AbsDecls dr = new AbsDecls();
			dr.decls.addAll(cdr.decls);
			dr.decls.addAll(tdr.decls);
			dr.decls.addAll(vdr.decls);
			dr.decls.addAll(sdr.decls);
			
			if(sh instanceof AbsProcDecl){
				((AbsProcDecl)sh).decls = dr;
				((AbsProcDecl)sh).stmt = (AbsBlockStmt)cmpst;
			}
			else{
				((AbsFunDecl)sh).decls = dr;
				((AbsFunDecl)sh).stmt = (AbsBlockStmt)cmpst;
			}
			
			AbsDecls d = (AbsDecls)sd;
			d.decls.add(sh);
			RESULT = d;
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vars ::= 
            {
              AbsDecls RESULT =null;
		 	RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vars ::= vars IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = vs; 
        	AbsDeclName n = new AbsDeclName(id);
        	n.setPos(id.toString(), idleft, idright);
        	AbsVarDecl e = new AbsVarDecl(n, te);
        	e.setPos(id.toString(), idleft, idright);
        	d.decls.add(e); 
        	RESULT = d;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("vars",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_declarations ::= 
            {
              AbsDecls RESULT =null;
		 RESULT = new AbsDecls();	 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("variable_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable_declarations ::= VAR vars IDENTIFIER COLON type SEMIC 
            {
              AbsDecls RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls vs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr te = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		 	AbsDecls d = vs; 
			AbsDeclName n = new AbsDeclName(id);
			n.setPos(id.toString(), idleft, idright);
			AbsVarDecl e = new AbsVarDecl(n, te);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			d.decls.add(e); 
			RESULT = d; 
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("variable_declarations",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration ::= TYPE_IDENTIFIER EQU type SEMIC 
            {
              AbsTypeDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTypeExpr t = (AbsTypeExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			AbsDeclName n = new AbsDeclName(id);
			n.setPos(id.toString(), idleft, idright);
			AbsTypeDecl e = new AbsTypeDecl(n, t);
			e.setBeg(id.toString(), idleft, idright);
			e.setEnd(s.toString(), sleft, sright); 
			RESULT = e;
		
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declaration",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // types ::= type_declaration 
            {
              AbsDecls RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeDecl td = (AbsTypeDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls a =  new AbsDecls(); a.decls.add(td);  RESULT = a; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // types ::= types type_declaration 
            {
              AbsDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls t = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsTypeDecl td = (AbsTypeDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = t; d.decls.add(td); RESULT = d; 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("types",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declarations ::= TYPE types 
            {
              AbsDecls RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsDecls t = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  RESULT = t;	
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_declarations ::= 
            {
              AbsDecls RESULT =null;
		  RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_declarations",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant ::= IDENTIFIER EQU value SEMIC 
            {
              AbsConstDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsValExpr v = (AbsValExpr)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDeclName name = new AbsDeclName(id);
            name.setPos(id.toString(), idleft, idright);
            
            AbsConstDecl cons = new AbsConstDecl(name, v);
            cons.setBeg(id.toString(), idleft, idright);
            cons.setEnd(s.toString(), sleft, sright);
            RESULT = cons;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constants ::= 
            {
              AbsDecls RESULT =null;
		  RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constants ::= constants constant 
            {
              AbsDecls RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls cs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsConstDecl c = (AbsConstDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
			AbsDecls d = cs;
            d.decls.add(c); 
            RESULT = d;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constants",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constant_declarations ::= CONST constants constant 
            {
              AbsDecls RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsDecls cs = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		AbsConstDecl c = (AbsConstDecl)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = cs;
            d.decls.add(c); 
            RESULT = d; 
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_declarations",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constant_declarations ::= 
            {
              AbsDecls RESULT =null;
		 RESULT = new AbsDecls(); 
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_declarations",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_indication ::= IDENTIFIER SEMIC 
            {
              AbsDeclName RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  RESULT = new AbsDeclName(pName);
        	RESULT.setBeg(pName.toString(), pNameleft, pNameright);
        	RESULT.setEnd(s.toString(), sleft, sright);
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program_indication",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= PROGRAM program_indication constant_declarations type_declarations variable_declarations subprogram_declarations multiple_statement DOT 
            {
              AbsTree RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).right;
		AbsDeclName program = (AbsDeclName)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-6)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).right;
		AbsDecls cd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).right;
		AbsDecls td = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).right;
		AbsDecls vd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).right;
		AbsDecls sd = (AbsDecls)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)).value;
		int mstmtleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int mstmtright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsBlockStmt mstmt = (AbsBlockStmt)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()).right;
		Object dot = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.peek()).value;
		  AbsDecls d = new AbsDecls();
            d.decls.addAll(cd.decls);
            d.decls.addAll(td.decls);
        	d.decls.addAll(vd.decls);
        	d.decls.addAll(sd.decls); 
        	
            d.setBeg(program.toString(), programleft, programright);
            d.setEnd(mstmt.toString(), mstmtleft, mstmtright);
            
            AbsProgram p = new AbsProgram(program, d, mstmt);
            p.setBeg(pr.toString(), prleft, prright);
            p.setEnd(dot.toString(), dotleft, dotright);
            
            RESULT = p;
        
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		AbsTree start_val = (AbsTree)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

